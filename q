warning: in the working copy of 'README.md', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'code/Jupyter/imod_python_conversion/imod_python_init_NBr32.ipynb', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/Mng/Mdl_Ipvs.xlsx b/Mng/Mdl_Ipvs.xlsx[m
[1mindex 69cdddc..8a83ed0 100644[m
Binary files a/Mng/Mdl_Ipvs.xlsx and b/Mng/Mdl_Ipvs.xlsx differ
[1mdiff --git a/Mng/RunLog.xlsx b/Mng/RunLog.xlsx[m
[1mindex 5d1e0df..8eb14b9 100644[m
Binary files a/Mng/RunLog.xlsx and b/Mng/RunLog.xlsx differ
[1mdiff --git a/Mng/log.csv b/Mng/log.csv[m
[1mindex 4b14102..8e5222c 100644[m
[1m--- a/Mng/log.csv[m
[1m+++ b/Mng/log.csv[m
[36m@@ -29,3 +29,4 @@[m [mNBr27,PoPed,2025-07-04 08:52:16,2025-07-04 08:53:24,2025-07-04 08:56:58,2025-07-[m
 NBr28,Completed,2025-07-07 14:45:27,2025-07-07 14:46:15,2025-07-07 14:46:54,,00:00:39,UU120516,C:/OD/WS_Mdl\models/NBr\Sim,2010-01-01,2010-01-05,v0.7.4,667ea282c3ba93f68d858ab1dc6b22956191035f,,,[m
 NBr29,PoPed,2025-07-10 16:24:04,2025-07-10 16:25:21,2025-07-10 16:43:29,2025-07-10 16:44:15,00:18:07,UU120516,C:/OD/WS_Mdl\models/NBr\Sim,2010-01-01,2010-01-05,0.7.7,62f48f8ff352a96f963d6c1e6bc2c2e71b0de4b1,1.0,(L == 1),1.0[m
 NBr30,PoPed,2025-07-11 13:45:57,2025-07-11 13:49:32,2025-07-11 13:53:43,2025-07-11 13:54:29,00:04:10,UU120516,C:/OD/WS_Mdl\models/NBr\Sim,2010-01-01,2010-01-05,0.7.8,bc939be1b30e4d76a90a9590d35e4ad04f3abda1,1.0,(L == 1),1.0[m
[32m+[m[32mNBr32,Running,2025-08-07 16:12:38,,,,,UU120516,C:/OD/WS_Mdl\models/NBr\Sim,2010-01-01,2010-01-03,-,a6cd6187fde268ed029f089ddc22346719c7eb4b,,,[m
[1mdiff --git a/README.md b/README.md[m
[1mindex 283b095..032f80d 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -10,7 +10,7 @@[m [mmklink /D C:\OD "C:\Users\<User>\OneDrive - Universiteit Utrecht"<br>[m
 The symbolic link can be deleted using:<br>[m
 rmdir C:\OD[m
 [m
[31m-The model files are shared only upon request. You can get the public files by cloning the repo:[m
[32m+[m[32mThe model files are shared only upon request. **Clone** the repo to get the publicly avaialble files:[m
 git clone https://github.com/Ydrolog/WS_Mdl[m
 ---[m
 [m
[36m@@ -22,6 +22,11 @@[m [mgit clone https://github.com/Ydrolog/WS_Mdl[m
 ---[m
 [m
 [m
[32m+[m[32m# Knowledge requirements[m
[32m+[m[32mYou need to be familiar with Groundwater Modelling concepts, version control/GitHub... TBC[m
[32m+[m[32m---[m
[32m+[m
[32m+[m
 # Folder structure/description[m
 Files that are specific to one of the **models** will be contained withing the folder of that model. The rest of the folders in this directory should contain files that are (or will be) used by/for multiple models.<br>[m
 Below is a brief description of the contents of each main folder in this directory.<br>[m
[36m@@ -36,7 +41,7 @@[m [mthe models folder structure is described in more detail below because it is comp[m
 ---[m
 [m
 [m
[31m-## Models[m
[32m+[m[32m## Model(s)[m
 All model sub-folders contain the same folder structure for consistency. Files in those folders are only relevant to this Mdl. The Fo Str is described below:[m
 - **code**:	Contains code specific to each Mdl. e.g. Mdl_Prep contains the .bat & .ini file to prepare a Mdl run.[m
 - **doc**:	self-explanatory[m
[36m@@ -63,10 +68,10 @@[m [mcd "C:\Users\mkarampasi\OneDrive - Universiteit Utrecht\Software\InstalledOutsid[m
 .\doublecmd-1.1.22.x86_64-win64.exe <br>[m
 Opt: replace files in C:\Users\<User>\AppData\Roaming\doublecmd\ with files in C:\OD\Software\Settings\Double Commander\ (might need to enable view Hidden files)[m
 [m
[31m-2. **Python Env** (with snakmake)[m
[31m-Install the **Python** env necessary for this project following this guide:[m
[32m+[m[32m2. **pixi Env** (with snakmake)[m
[32m+[m[32mInstall the pixi env, necessary for this project, following this guide:[m
 ./code/Env/how_to_make_Env.md[m
[31m-(C:\OD\WS_Mdl\**code**\Env\How_to_make_env.md)[m
[32m+[m[32m(C:\OD\WS_Mdl\code\Env\How_to_make_env.md)[m
 [m
 3. (Opt: **PS7** - #666 I should make a guide later)[m
 [m
[36m@@ -79,4 +84,5 @@[m [mInstall the **Python** env necessary for this project following this guide:[m
 There is a list of **terminal tools** that facilitate common tasks for this project. Those are listed in C:/OD/WS_Mdl/code/setup.py, with a brief description.<br>[m
 To add another terminal command, you need to add it to the setup file (similar to the other commands), and make a script. Then you need to install WS_Mdl (as explained in the Python Env installation guide above).<br>[m
 It's also possible to run Python functions from C:\OD\WS_Mdl\code\WS_Mdl\ modules via "`WS_Mdl.module` <function> <arg1> <arg2> ...".[m
[31m----[m
\ No newline at end of file[m
[32m+[m
[32m+[m[32m---[m
[1mdiff --git a/code/Env/freeze_pixi_env.py b/code/Env/freeze_pixi_env.py[m
[1mdeleted file mode 100644[m
[1mindex 0cbd9a9..0000000[m
[1m--- a/code/Env/freeze_pixi_env.py[m
[1m+++ /dev/null[m
[36m@@ -1,52 +0,0 @@[m
[31m-#!/usr/bin/env python3[m
[31m-import subprocess[m
[31m-import sys[m
[31m-from datetime import datetime as DT[m
[31m-from pathlib import Path[m
[31m-[m
[31m-# from WS_Mdl import utils as U[m
[31m-[m
[31m-# Pa_toml, Pa_lock, Pa_WS_Mdl = U.[m
[31m-[m
[31m-# Paths relative to repo root[m
[31m-FILES_TO_TRACK = ['pixi.toml', 'pixi.lock', 'WS_Mdl/'][m
[31m-[m
[31m-[m
[31m-def run_cmd(cmd, check=True, capture=False):[m
[31m-    return subprocess.run(cmd, check=check, capture_output=capture, text=True)[m
[31m-[m
[31m-[m
[31m-def main():[m
[31m-    try:[m
[31m-        # Ensure we are in repo root[m
[31m-        repo_root = run_cmd(['git', 'rev-parse', '--show-toplevel'], capture=True).stdout.strip()[m
[31m-        print(f'Repo root: {repo_root}')[m
[31m-        Path(repo_root)  # not really needed but keeps structure[m
[31m-[m
[31m-        # Check for changes in the relevant files[m
[31m-        diff_cmd = ['git', 'status', '--porcelain'] + FILES_TO_TRACK[m
[31m-        changes = run_cmd(diff_cmd, capture=True).stdout.strip()[m
[31m-[m
[31m-        if not changes:[m
[31m-            print('No changes to tracked env/code files. Nothing to commit.')[m
[31m-            return[m
[31m-[m
[31m-        print('Changes detected:\n' + changes)[m
[31m-[m
[31m-        # Stage changes[m
[31m-        run_cmd(['git', 'add'] + FILES_TO_TRACK)[m
[31m-        print('Staged changes.')[m
[31m-[m
[31m-        # Commit with timestamp[m
[31m-        now = DT.now().strftime('%Y-%m-%d %H:%M:%S')[m
[31m-        commit_msg = f'Model run prep – {now}'[m
[31m-        run_cmd(['git', 'commit', '-m', commit_msg])[m
[31m-        print(f"Committed changes with message: '{commit_msg}'")[m
[31m-[m
[31m-    except subprocess.CalledProcessError as e:[m
[31m-        print(f'Error running command: {e}', file=sys.stderr)[m
[31m-        sys.exit(1)[m
[31m-[m
[31m-[m
[31m-if __name__ == '__main__':[m
[31m-    main()[m
[1mdiff --git a/code/Env/how_to_make_Env.md b/code/Env/how_to_make_Env.md[m
[1mindex 0901ba5..f787909 100644[m
[1m--- a/code/Env/how_to_make_Env.md[m
[1m+++ b/code/Env/how_to_make_Env.md[m
[36m@@ -1,35 +1,46 @@[m
[31m-# NEW GUIDE - env managemet py pixi ##########[m
[32m+[m[32m# pixi Env guide[m
 -----------------------------------------[m
[31m-This project uses pixi for managing dependencies. Why? Cause it's more robust/secure and fast than conda or any other package manager. [m
[32m+[m[32mThis project uses **pixi** for managing dependencies. Why? So that Sims are reproducible and old code works.[m
[32m+[m[32mPixi is also more robust/secure and fast than conda or any other package manager that I know, hence it was chosen.[m
 For more details check: https://pixi.sh/latest/[m
 [m
[31m-This guide explains how we use **Pixi** to create, reproduce, and share the software environment for the *WS_Mdl* project.[m
[32m+[m[32mThis guide explains how to use **pixi** to create, reproduce, and share the software environment for the *WS_Mdl* project.[m
 [m
 ## 1. Download and install pixi.[m
 - either follow their instructions on the website (https://pixi.sh/latest/installation/).[m
 - or if you have/prefer conda (I haven't tried this, but it should work):[m
[31m-	install -c conda-forge pixi [m
[32m+[m	[32minstall -c conda-forge pixi[m
 [m
[31m-## 2. To re-create the env that was used for Sim.[m
[31m-1. If you don't have the files for this project, you'll need to **clone** the repo.[m
[32m+[m[32m## 2. Clone env.[m
[32m+[m[32mIf you don't have the files for this project, you'll need to **clone** the repo.[m
 git clone https://github.com/Ydrolog/WS_Mdl C:\OD\WS_Mdl[m
 C:\OD\WS_Mdl is the default location. If you want it somewhere else, feel free to change the path, but that may make things more complicated later.[m
 Not all files are public, you'll need to request the rest from the project owner(s).[m
 [m
[31m-2. The pixi env is installed in C:\OD\WS_Mdl\code, as there is no code in the other folders that need to use it. Make it your active dir if you're not already there.[m
[31m-cd C:\OD\WS_Mdl\code[m
[32m+[m[32m## 3. (re)create previous pixi env.[m
[32m+[m[32m(This can be replaced by a script that only requires the Run to reproduce as input)[m
[32m+[m[32mThe main reason to recreate a pixi env is to reproduce an older Sim.[m
[32m+[m[32mMost of the time, a Sim should run on most versions of the repo. But recreating the env ensures identical results, so you're advised to do so.[m
 [m
[31m-3. **Copy** tag or hash.[m
[32m+[m[32m1. Ensure you've committed any work before doing this. (git add, git commit etc.)[m
[32m+[m
[32m+[m[32m2. Register new/repeat Sims in the RunLog. It's safer and simpler to have more Sims than to remove the old ones. "Sim numbers are free, the pain of Sim confusion is priceless"[m
[32m+[m[32mMake sure you write in the descriptio which Sims you're repeating and how you're recreating them (could be a reference to this file...)[m
[32m+[m
[32m+[m[32m3. **Copy** tag or hash of the Sim you want to recreate.[m
    *Open* `./Mng/RunLog.xlsx` and copy the *Tag* or *Hash* column for the Sim you want to re-run.[m
 [m
[31m-4. **Checkout** that commit:[m
[31m-git checkout <hash/tag>[m
[32m+[m[32m4. **Restore** env defining files:[m
[32m+[m[32mgit restore --source <sha_or_tag> --pathspec-from-file=C:\WS_Mdl\code\Env\pixi_env_Fis.txt[m
[32m+[m
[32m+[m[32m5. Change directory[m
[32m+[m[32mcd C:\WS_Mdl\code[m
 [m
[31m-5. **Re-build** env:[m
[31m-pixi run install --frozen # This uses both the pixi.lock and pixi.toml files to ensure reinstallation of locked package versions.[m
[31m-pixi run install # This only requires the pixi.toml file. It should work, but it's less secure.[m
[32m+[m[32m6. **Re-build** env:[m
[32m+[m[32mpixi install --frozen # This uses both the pixi.lock and pixi.toml files to ensure reinstallation of locked package versions.[m
[32m+[m[32mpixi install # This only requires the pixi.toml file. It should work, but it's less secure.[m
 [m
[31m-6. Optional: **WS_Mdl** lib:[m
[32m+[m[32m7. Optional: **WS_Mdl refresh**:[m
 pixi run --no-lockfile-update pip install -e C:\OD\WS_Mdl\code # (pip install -e C:\OD\WS_Mdl\code (--use-pep517 --no-build-isolation) could also work)[m
 Run this whenever you want to update WS_Mdl. It's in edit mode, so any small changes (e.g. code in exiting files) are updated automatically. I use this when I make a new terminal tool and I want to add it to path.[m
 [m
[36m@@ -48,13 +59,13 @@[m [mpixi add --pypi "rasterio>=1.3"[m
 3. **Solve & lock**[m
    pixi install          # updates pixi.lock[m
 [m
[31m-3. **Freeze**. Don't forget to add the changes to your next commit, e.g.:[m
[32m+[m[32m4. **Freeze**. Don't forget to add the changes to your next commit, e.g.:[m
    git add pixi.toml pixi.lock[m
    git commit -m "Add rasterio 1.3+"[m
 -----------------------------------------[m
 [m
 [m
[31m-# THE GUIDE BELOW IS THE OLD ONE. That way of env management applies from 04/08, NBr32, hash b5dfc2b backwards.[m
[32m+[m[32m# THE GUIDE BELOW IS THE OLD ONE. That way of env management was used for the last time on 04/08, NBr32, hash b5dfc2b.[m
 -----------------------------------------[m
 --- To freeze/export: ---[m
 The WS env should be frozen on every change. If no Env is present for a run/Sim you want to repeat, assume that the previous one will do the job.[m
[1mdiff --git a/code/Jupyter/imod_python_conversion/imod_python_init_NBr32.ipynb b/code/Jupyter/imod_python_conversion/imod_python_init_NBr32.ipynb[m
[1mindex 508eb1d..873a580 100644[m
[1m--- a/code/Jupyter/imod_python_conversion/imod_python_init_NBr32.ipynb[m
[1m+++ b/code/Jupyter/imod_python_conversion/imod_python_init_NBr32.ipynb[m
[36m@@ -1,5 +1,13 @@[m
 {[m
  "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "1030510d",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Execution Time monitoring"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
   {[m
    "cell_type": "code",[m
    "execution_count": 1,[m
[36m@@ -187,7 +195,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 50,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "2db71674",[m
    "metadata": {},[m
    "outputs": [],[m
[36m@@ -197,7 +205,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 11,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "f43af1a6",[m
    "metadata": {},[m
    "outputs": [],[m
[36m@@ -215,7 +223,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 12,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "1cc7e265",[m
    "metadata": {},[m
    "outputs": [],[m
[36m@@ -225,7 +233,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 13,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "48c0976f",[m
    "metadata": {},[m
    "outputs": [],[m
[36m@@ -235,18 +243,10 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 14,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "c8598a0a",[m
    "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "name": "stdout",[m
[31m-     "output_type": "stream",[m
[31m-     "text": [[m
[31m-      "✅ Boundary conditions set successfully!\n"[m
[31m-     ][m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
     "# Set outer boundaries to -1 (for CHD)\n",[m
     "\n",[m
[36m@@ -269,31 +269,10 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 15,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "b1ba325d",[m
    "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "text/plain": [[m
[31m-       "<matplotlib.image.AxesImage at 0x2ac9f4f8ec0>"[m
[31m-      ][m
[31m-     },[m
[31m-     "execution_count": 15,[m
[31m-     "metadata": {},[m
[31m-     "output_type": "execute_result"[m
[31m-    },[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "image/png": "",[m
[31m-      "text/plain": [[m
[31m-       "<Figure size 640x480 with 2 Axes>"[m
[31m-      ][m
[31m-     },[m
[31m-     "metadata": {},[m
[31m-     "output_type": "display_data"[m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
     "BND.isel(layer=0, x=range(0,10), y=range(0,10)).plot.imshow(cmap='viridis')"[m
    ][m
[36m@@ -308,7 +287,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 16,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "aa7236f9",[m
    "metadata": {},[m
    "outputs": [],[m
[36m@@ -326,27592 +305,17 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 17,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "f749ccb3",[m
    "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "name": "stderr",[m
[31m-     "output_type": "stream",[m
[31m-     "text": [[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",[m
[31m-      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",[m
[31m-      "A typical example is when you are setting values in a column of a DataFrame, like:\n",[m
[31m-      "\n",[m
[31m-      "df[\"col\"][row_indexer] = value\n",[m
[31m-      "\n",[m
[31m-      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n",[m
[31m-      "c:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\code\\.pixi\\envs\\default\\Lib\\site-packages\\imod\\util\\expand_repetitions.py:89: SettingWithCopyWarning: \n",[m
[31m-      "A value is trying to be set on a copy of a slice from a DataFrame\n",[m
[31m-      "\n",[m
[31m-      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",[m
[31m-      "  well_rate[\"time\"].iloc[-1:] = well_rate[\"time\"].iloc[-1:].fillna(pd.Timestamp.max)\n"[m
[31m-     ][m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
     "Sim_MF6 = mf6.Modflow6Simulation.from_imod5_data(PRJ_regrid, period_data, times)"[m
    ][m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 18,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "234ead8b",[m
    "metadata": {},[m
    "outputs": [],[m
[36m@@ -27929,7 +333,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 19,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "3e51ba58",[m
    "metadata": {},[m
    "outputs": [],[m
[36m@@ -27957,7 +361,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 20,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "02af4484",[m
    "metadata": {},[m
    "outputs": [],[m
[36m@@ -27967,7 +371,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 21,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "eae098c4",[m
    "metadata": {},[m
    "outputs": [],[m
[36m@@ -27994,20 +398,10 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 22,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "1ed6fe49",[m
    "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "name": "stdout",[m
[31m-     "output_type": "stream",[m
[31m-     "text": [[m
[31m-      "Error creating MetaSwap model: \n",[m
[31m-      "Did not find parsable path to existing .ASC file in column 2. Got\n",[m
[31m-      "values (printing first 10): ['..\\\\..\\\\In\\\\CAP\\\\P\\\\NBr1\\\\P_20100101_NBr1.asc', '..\\\\..\\\\In\\\\CAP\\\\P\\\\NBr1\\\\P_20100102_NBr1.asc', '..\\\\..\\\\In\\\\CAP\\\\P\\\\NBr1\\\\P_20100103_NBr1.asc', '..\\\\..\\\\In\\\\CAP\\\\P\\\\NBr1\\\\P_20100104_NBr1.asc', '..\\\\..\\\\In\\\\CAP\\\\P\\\\NBr1\\\\P_20100105_NBr1.asc', '..\\\\..\\\\In\\\\CAP\\\\P\\\\NBr1\\\\P_20100106_NBr1.asc', '..\\\\..\\\\In\\\\CAP\\\\P\\\\NBr1\\\\P_20100107_NBr1.asc', '..\\\\..\\\\In\\\\CAP\\\\P\\\\NBr1\\\\P_20100108_NBr1.asc', '..\\\\..\\\\In\\\\CAP\\\\P\\\\NBr1\\\\P_20100109_NBr1.asc', '..\\\\..\\\\In\\\\CAP\\\\P\\\\NBr1\\\\P_20100110_NBr1.asc'].\n"[m
[31m-     ][m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
     "try:\n",[m
     "    MSW_Mdl = msw.MetaSwapModel.from_imod5_data(PRJ_MSW, MF6_DIS, times)\n",[m
[36m@@ -28036,18 +430,10 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 23,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "90bd32c3",[m
    "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "name": "stdout",[m
[31m-     "output_type": "stream",[m
[31m-     "text": [[m
[31m-      "Created corrected mete_grid.inp: C:\\Users\\Karam014\\OneDrive - Universiteit Utrecht\\WS_Mdl\\models\\NBr\\In\\CAP\\mete_grid\\NBr5\\temp\\mete_grid.inp\n"[m
[31m-     ][m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
     "# Replace the mete_grid.inp path in the PRJ_MSW_for_MSW dictionary\n",[m
     "PRJ['extra']['paths'][2][0] = UIM.mete_grid_Cvt_to_AbsPa(Pa_PRJ, PRJ)"[m
[36m@@ -28063,18 +449,10 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 24,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "d5005945",[m
    "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "name": "stdout",[m
[31m-     "output_type": "stream",[m
[31m-     "text": [[m
[31m-      "🎉 MetaSwap model loaded successfully!\n"[m
[31m-     ][m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
     "# Create the MetaSwap model\n",[m
     "MSW_Mdl = msw.MetaSwapModel.from_imod5_data(PRJ_MSW, MF6_DIS, times)\n",[m
[36m@@ -28099,7 +477,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 25,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "06f90a7f",[m
    "metadata": {},[m
    "outputs": [],[m
[36m@@ -28109,7 +487,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 26,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "e6be0c8a",[m
    "metadata": {},[m
    "outputs": [],[m
[36m@@ -28119,7 +497,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 27,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "f76d1d24",[m
    "metadata": {},[m
    "outputs": [],[m
[36m@@ -28129,20 +507,10 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 28,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "1c685aa5",[m
    "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "name": "stdout",[m
[31m-     "output_type": "stream",[m
[31m-     "text": [[m
[31m-      "MF6 Model AoI DIS shape: Frozen({'layer': 37, 'y': 344, 'x': 480})\n",[m
[31m-      "MSW Model AoI grid shape: Frozen({'x': 480, 'y': 344, 'subunit': 2})\n",[m
[31m-      "✅ Both models successfully clipped to Area of Interest with compatible discretization!\n"[m
[31m-     ][m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
     "print(f\"MF6 Model AoI DIS shape: {MF6_Mdl_AoI['dis'].dataset.sizes}\")\n",[m
     "print(f\"MSW Model AoI grid shape: {MSW_Mdl_AoI['grid'].dataset.sizes}\")\n",[m
[36m@@ -28151,21 +519,10 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 29,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "045b4d51",[m
    "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "text/plain": [[m
[31m-       "True"[m
[31m-      ][m
[31m-     },[m
[31m-     "execution_count": 29,[m
[31m-     "metadata": {},[m
[31m-     "output_type": "execute_result"[m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
     "MF6_Mdl_AoI['dis'].dataset.equals(MF6_Mdl['dis'].dataset)"[m
    ][m
[36m@@ -28188,42 +545,20 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 30,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "8979c992",[m
    "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "text/plain": [[m
[31m-       "(113100.0, 125100.0, 387600.0, 396200.0)"[m
[31m-      ][m
[31m-     },[m
[31m-     "execution_count": 30,[m
[31m-     "metadata": {},[m
[31m-     "output_type": "execute_result"[m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
     "Xmin, Xmax, Ymin, Ymax"[m
    ][m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 31,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "44f2727b",[m
    "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "text/plain": [[m
[31m-       "(array(113112.5), array(125087.5), array(387612.5), array(396187.5))"[m
[31m-      ][m
[31m-     },[m
[31m-     "execution_count": 31,[m
[31m-     "metadata": {},[m
[31m-     "output_type": "execute_result"[m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
     "MF6_Mdl_AoI['dis']['x'].min().values, MF6_Mdl_AoI['dis']['x'].max().values, \\\n",[m
     "MF6_Mdl_AoI['dis']['y'].min().values, MF6_Mdl_AoI['dis']['y'].max().values"[m
[36m@@ -28247,7 +582,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 32,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "e260be4c",[m
    "metadata": {},[m
    "outputs": [],[m
[36m@@ -28277,7 +612,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 33,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "75111d78",[m
    "metadata": {},[m
    "outputs": [],[m
[36m@@ -28288,7 +623,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 34,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "f0e555af",[m
    "metadata": {},[m
    "outputs": [],[m
[36m@@ -28307,7 +642,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 35,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "bc22c182",[m
    "metadata": {},[m
    "outputs": [],[m
[36m@@ -28317,518 +652,10 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 36,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "cb3e3ad0",[m
    "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "name": "stdout",[m
[31m-     "output_type": "stream",[m
[31m-     "text": [[m
[31m-      "Are the keys identical? False\n",[m
[31m-      "\n",[m
[31m-      "=== DETAILED KEY COMPARISON ===\n",[m
[31m-      "Original model has 165 packages:\n",[m
[31m-      "  - chd_merged\n",[m
[31m-      "  - dis\n",[m
[31m-      "  - drn-1\n",[m
[31m-      "  - drn-2\n",[m
[31m-      "  - drn-3\n",[m
[31m-      "  - hfb-1\n",[m
[31m-      "  - hfb-10\n",[m
[31m-      "  - hfb-100\n",[m
[31m-      "  - hfb-101\n",[m
[31m-      "  - hfb-102\n",[m
[31m-      "  - hfb-103\n",[m
[31m-      "  - hfb-104\n",[m
[31m-      "  - hfb-105\n",[m
[31m-      "  - hfb-106\n",[m
[31m-      "  - hfb-107\n",[m
[31m-      "  - hfb-108\n",[m
[31m-      "  - hfb-109\n",[m
[31m-      "  - hfb-11\n",[m
[31m-      "  - hfb-110\n",[m
[31m-      "  - hfb-111\n",[m
[31m-      "  - hfb-112\n",[m
[31m-      "  - hfb-113\n",[m
[31m-      "  - hfb-114\n",[m
[31m-      "  - hfb-115\n",[m
[31m-      "  - hfb-116\n",[m
[31m-      "  - hfb-117\n",[m
[31m-      "  - hfb-118\n",[m
[31m-      "  - hfb-119\n",[m
[31m-      "  - hfb-12\n",[m
[31m-      "  - hfb-120\n",[m
[31m-      "  - hfb-121\n",[m
[31m-      "  - hfb-122\n",[m
[31m-      "  - hfb-123\n",[m
[31m-      "  - hfb-124\n",[m
[31m-      "  - hfb-125\n",[m
[31m-      "  - hfb-126\n",[m
[31m-      "  - hfb-127\n",[m
[31m-      "  - hfb-128\n",[m
[31m-      "  - hfb-129\n",[m
[31m-      "  - hfb-13\n",[m
[31m-      "  - hfb-130\n",[m
[31m-      "  - hfb-131\n",[m
[31m-      "  - hfb-132\n",[m
[31m-      "  - hfb-133\n",[m
[31m-      "  - hfb-134\n",[m
[31m-      "  - hfb-135\n",[m
[31m-      "  - hfb-136\n",[m
[31m-      "  - hfb-137\n",[m
[31m-      "  - hfb-138\n",[m
[31m-      "  - hfb-139\n",[m
[31m-      "  - hfb-14\n",[m
[31m-      "  - hfb-140\n",[m
[31m-      "  - hfb-141\n",[m
[31m-      "  - hfb-142\n",[m
[31m-      "  - hfb-143\n",[m
[31m-      "  - hfb-144\n",[m
[31m-      "  - hfb-145\n",[m
[31m-      "  - hfb-146\n",[m
[31m-      "  - hfb-147\n",[m
[31m-      "  - hfb-148\n",[m
[31m-      "  - hfb-149\n",[m
[31m-      "  - hfb-15\n",[m
[31m-      "  - hfb-150\n",[m
[31m-      "  - hfb-16\n",[m
[31m-      "  - hfb-17\n",[m
[31m-      "  - hfb-18\n",[m
[31m-      "  - hfb-19\n",[m
[31m-      "  - hfb-2\n",[m
[31m-      "  - hfb-20\n",[m
[31m-      "  - hfb-21\n",[m
[31m-      "  - hfb-22\n",[m
[31m-      "  - hfb-23\n",[m
[31m-      "  - hfb-24\n",[m
[31m-      "  - hfb-25\n",[m
[31m-      "  - hfb-26\n",[m
[31m-      "  - hfb-27\n",[m
[31m-      "  - hfb-28\n",[m
[31m-      "  - hfb-29\n",[m
[31m-      "  - hfb-3\n",[m
[31m-      "  - hfb-30\n",[m
[31m-      "  - hfb-31\n",[m
[31m-      "  - hfb-32\n",[m
[31m-      "  - hfb-33\n",[m
[31m-      "  - hfb-34\n",[m
[31m-      "  - hfb-35\n",[m
[31m-      "  - hfb-36\n",[m
[31m-      "  - hfb-37\n",[m
[31m-      "  - hfb-38\n",[m
[31m-      "  - hfb-39\n",[m
[31m-      "  - hfb-4\n",[m
[31m-      "  - hfb-40\n",[m
[31m-      "  - hfb-41\n",[m
[31m-      "  - hfb-42\n",[m
[31m-      "  - hfb-43\n",[m
[31m-      "  - hfb-44\n",[m
[31m-      "  - hfb-45\n",[m
[31m-      "  - hfb-46\n",[m
[31m-      "  - hfb-47\n",[m
[31m-      "  - hfb-48\n",[m
[31m-      "  - hfb-49\n",[m
[31m-      "  - hfb-5\n",[m
[31m-      "  - hfb-50\n",[m
[31m-      "  - hfb-51\n",[m
[31m-      "  - hfb-52\n",[m
[31m-      "  - hfb-53\n",[m
[31m-      "  - hfb-54\n",[m
[31m-      "  - hfb-55\n",[m
[31m-      "  - hfb-56\n",[m
[31m-      "  - hfb-57\n",[m
[31m-      "  - hfb-58\n",[m
[31m-      "  - hfb-59\n",[m
[31m-      "  - hfb-6\n",[m
[31m-      "  - hfb-60\n",[m
[31m-      "  - hfb-61\n",[m
[31m-      "  - hfb-62\n",[m
[31m-      "  - hfb-63\n",[m
[31m-      "  - hfb-64\n",[m
[31m-      "  - hfb-65\n",[m
[31m-      "  - hfb-66\n",[m
[31m-      "  - hfb-67\n",[m
[31m-      "  - hfb-68\n",[m
[31m-      "  - hfb-69\n",[m
[31m-      "  - hfb-7\n",[m
[31m-      "  - hfb-70\n",[m
[31m-      "  - hfb-71\n",[m
[31m-      "  - hfb-72\n",[m
[31m-      "  - hfb-73\n",[m
[31m-      "  - hfb-74\n",[m
[31m-      "  - hfb-75\n",[m
[31m-      "  - hfb-76\n",[m
[31m-      "  - hfb-77\n",[m
[31m-      "  - hfb-78\n",[m
[31m-      "  - hfb-79\n",[m
[31m-      "  - hfb-8\n",[m
[31m-      "  - hfb-80\n",[m
[31m-      "  - hfb-81\n",[m
[31m-      "  - hfb-82\n",[m
[31m-      "  - hfb-83\n",[m
[31m-      "  - hfb-84\n",[m
[31m-      "  - hfb-85\n",[m
[31m-      "  - hfb-86\n",[m
[31m-      "  - hfb-87\n",[m
[31m-      "  - hfb-88\n",[m
[31m-      "  - hfb-89\n",[m
[31m-      "  - hfb-9\n",[m
[31m-      "  - hfb-90\n",[m
[31m-      "  - hfb-91\n",[m
[31m-      "  - hfb-92\n",[m
[31m-      "  - hfb-93\n",[m
[31m-      "  - hfb-94\n",[m
[31m-      "  - hfb-95\n",[m
[31m-      "  - hfb-96\n",[m
[31m-      "  - hfb-97\n",[m
[31m-      "  - hfb-98\n",[m
[31m-      "  - hfb-99\n",[m
[31m-      "  - ic\n",[m
[31m-      "  - msw-rch\n",[m
[31m-      "  - msw-sprinkling\n",[m
[31m-      "  - npf\n",[m
[31m-      "  - oc\n",[m
[31m-      "  - riv-1riv\n",[m
[31m-      "  - sto\n",[m
[31m-      "  - wel-WEL_Br_Wa_T_\n",[m
[31m-      "  - wel-WEL_Ind_Aa_a\n",[m
[31m-      "  - wel-WEL_Ind_Br_T\n",[m
[31m-      "\n",[m
[31m-      "AoI model has 14 packages:\n",[m
[31m-      "  - chd_merged\n",[m
[31m-      "  - dis\n",[m
[31m-      "  - drn-1\n",[m
[31m-      "  - drn-2\n",[m
[31m-      "  - drn-3\n",[m
[31m-      "  - ic\n",[m
[31m-      "  - msw-rch\n",[m
[31m-      "  - msw-sprinkling\n",[m
[31m-      "  - npf\n",[m
[31m-      "  - oc\n",[m
[31m-      "  - riv-1riv\n",[m
[31m-      "  - sto\n",[m
[31m-      "  - wel-WEL_Br_Wa_T_\n",[m
[31m-      "  - wel-WEL_Ind_Br_T\n",[m
[31m-      "\n",[m
[31m-      "=== DIFFERENCES ===\n",[m
[31m-      "Packages REMOVED in AoI model (151):\n",[m
[31m-      "  ❌ hfb-1\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-10\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-100\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-101\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-102\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-103\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-104\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-105\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-106\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-107\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-108\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-109\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-11\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-110\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-111\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-112\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-113\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-114\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-115\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-116\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-117\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-118\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-119\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-12\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-120\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-121\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-122\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-123\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-124\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-125\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-126\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-127\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-128\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-129\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-13\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-130\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-131\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-132\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-133\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-134\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-135\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-136\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-137\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-138\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-139\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-14\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-140\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-141\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-142\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-143\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-144\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-145\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-146\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-147\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-148\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-149\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-15\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-150\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-16\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-17\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-18\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-19\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-2\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-20\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-21\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-22\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-23\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-24\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-25\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-26\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-27\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-28\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-29\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-3\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-30\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-31\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-32\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-33\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-34\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-35\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-36\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-37\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-38\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-39\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-4\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-40\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-41\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-42\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-43\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-44\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-45\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-46\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-47\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-48\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-49\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-5\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-50\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-51\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-52\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-53\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-54\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-55\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-56\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-57\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-58\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-59\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-6\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-60\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-61\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-62\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-63\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-64\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-65\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-66\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-67\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-68\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-69\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-7\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-70\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-71\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-72\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-73\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-74\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-75\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-76\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-77\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-78\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-79\n",[m
[31m-      "     Size in original: {'index': 1}\n",[m
[31m-      "  ❌ hfb-8\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-80\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-81\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-82\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-83\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-84\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-85\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-86\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-87\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-88\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-89\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-9\n",[m
[31m-      "     Size in original: {'index': 3}\n",[m
[31m-      "  ❌ hfb-90\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-91\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-92\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-93\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-94\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-95\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-96\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-97\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-98\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ hfb-99\n",[m
[31m-      "     Size in original: {'index': 2}\n",[m
[31m-      "  ❌ wel-WEL_Ind_Aa_a\n",[m
[31m-      "     Size in original: {'index': 17, 'time': 2}\n",[m
[31m-      "✅ No packages added in AoI model\n",[m
[31m-      "\n",[m
[31m-      "Common packages: 14/165 (8.5%)\n",[m
[31m-      "\n",[m
[31m-      "=== WHY PACKAGES WERE REMOVED ===\n",[m
[31m-      "Packages are typically removed from AoI models when:\n",[m
[31m-      "1. They have no data within the clipped boundary\n",[m
[31m-      "2. All their stress points/cells fall outside the AoI\n",[m
[31m-      "3. The clip_box() method filters out empty packages\n",[m
[31m-      "\n",[m
[31m-      "This is normal behavior and indicates successful spatial filtering!\n"[m
[31m-     ][m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
     "# Compare the keys of both models\n",[m
     "keys_equal = MF6_Mdl.keys() == MF6_Mdl_AoI.keys()\n",[m
[36m@@ -28890,110 +717,10 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 37,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "588b72e6",[m
    "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "name": "stdout",[m
[31m-     "output_type": "stream",[m
[31m-     "text": [[m
[31m-      "=== PACKAGE DATA COMPARISON ===\n",[m
[31m-      "Comparing spatial dimensions and data ranges for common packages:\n",[m
[31m-      "\n",[m
[31m-      "📦 chd_merged:\n",[m
[31m-      "   Original sizes: {'time': 1, 'layer': 19, 'y': 344, 'x': 480}\n",[m
[31m-      "   AoI sizes:      {'layer': 19, 'y': 344, 'x': 480, 'time': 1}\n",[m
[31m-      "   x reduction: 1.000 (480/480 cells)\n",[m
[31m-      "   y reduction: 1.000 (344/344 cells)\n",[m
[31m-      "   Variable 'print_input': Non-spatial data\n",[m
[31m-      "\n",[m
[31m-      "📦 dis:\n",[m
[31m-      "   Original sizes: {'layer': 37, 'y': 344, 'x': 480}\n",[m
[31m-      "   AoI sizes:      {'layer': 37, 'y': 344, 'x': 480}\n",[m
[31m-      "   x reduction: 1.000 (480/480 cells)\n",[m
[31m-      "   y reduction: 1.000 (344/344 cells)\n",[m
[31m-      "   Variable 'idomain': Data appears to be spatially clipped ✓\n",[m
[31m-      "\n",[m
[31m-      "📦 drn-1:\n",[m
[31m-      "   Original sizes: {'layer': 1, 'y': 344, 'x': 480, 'time': 1}\n",[m
[31m-      "   AoI sizes:      {'layer': 1, 'y': 344, 'x': 480, 'time': 1}\n",[m
[31m-      "   x reduction: 1.000 (480/480 cells)\n",[m
[31m-      "   y reduction: 1.000 (344/344 cells)\n",[m
[31m-      "   Variable 'print_input': Non-spatial data\n",[m
[31m-      "\n",[m
[31m-      "📦 drn-2:\n",[m
[31m-      "   Original sizes: {'layer': 1, 'y': 344, 'x': 480, 'time': 1}\n",[m
[31m-      "   AoI sizes:      {'layer': 1, 'y': 344, 'x': 480, 'time': 1}\n",[m
[31m-      "   x reduction: 1.000 (480/480 cells)\n",[m
[31m-      "   y reduction: 1.000 (344/344 cells)\n",[m
[31m-      "   Variable 'print_input': Non-spatial data\n",[m
[31m-      "\n",[m
[31m-      "📦 drn-3:\n",[m
[31m-      "   Original sizes: {'layer': 1, 'y': 344, 'x': 480, 'time': 1}\n",[m
[31m-      "   AoI sizes:      {'layer': 1, 'y': 344, 'x': 480, 'time': 1}\n",[m
[31m-      "   x reduction: 1.000 (480/480 cells)\n",[m
[31m-      "   y reduction: 1.000 (344/344 cells)\n",[m
[31m-      "   Variable 'print_input': Non-spatial data\n",[m
[31m-      "\n",[m
[31m-      "📦 ic:\n",[m
[31m-      "   Original sizes: {'layer': 37, 'y': 344, 'x': 480}\n",[m
[31m-      "   AoI sizes:      {'layer': 37, 'y': 344, 'x': 480}\n",[m
[31m-      "   x reduction: 1.000 (480/480 cells)\n",[m
[31m-      "   y reduction: 1.000 (344/344 cells)\n",[m
[31m-      "   Variable 'start': Data appears to be spatially clipped ✓\n",[m
[31m-      "\n",[m
[31m-      "📦 msw-rch:\n",[m
[31m-      "   Original sizes: {'x': 480, 'y': 344}\n",[m
[31m-      "   AoI sizes:      {'x': 480, 'y': 344}\n",[m
[31m-      "   x reduction: 1.000 (480/480 cells)\n",[m
[31m-      "   y reduction: 1.000 (344/344 cells)\n",[m
[31m-      "   Variable 'print_input': Non-spatial data\n",[m
[31m-      "\n",[m
[31m-      "📦 msw-sprinkling:\n",[m
[31m-      "   Original sizes: {'index': 26263}\n",[m
[31m-      "   AoI sizes:      {'index': 26263}\n",[m
[31m-      "   Variable 'x': Non-spatial data\n",[m
[31m-      "\n",[m
[31m-      "📦 npf:\n",[m
[31m-      "   Original sizes: {'layer': 37, 'y': 344, 'x': 480}\n",[m
[31m-      "   AoI sizes:      {'layer': 37, 'y': 344, 'x': 480}\n",[m
[31m-      "   x reduction: 1.000 (480/480 cells)\n",[m
[31m-      "   y reduction: 1.000 (344/344 cells)\n",[m
[31m-      "   Variable 'k33': Data appears to be spatially clipped ✓\n",[m
[31m-      "\n",[m
[31m-      "📦 oc:\n",[m
[31m-      "   Original sizes: {}\n",[m
[31m-      "   AoI sizes:      {}\n",[m
[31m-      "   Variable 'save_concentration': Non-spatial data\n",[m
[31m-      "\n",[m
[31m-      "📦 riv-1riv:\n",[m
[31m-      "   Original sizes: {'y': 344, 'x': 480, 'layer': 37, 'time': 1}\n",[m
[31m-      "   AoI sizes:      {'y': 344, 'x': 480, 'layer': 37, 'time': 1}\n",[m
[31m-      "   x reduction: 1.000 (480/480 cells)\n",[m
[31m-      "   y reduction: 1.000 (344/344 cells)\n",[m
[31m-      "   Variable 'print_input': Non-spatial data\n",[m
[31m-      "\n",[m
[31m-      "📦 sto:\n",[m
[31m-      "   Original sizes: {'layer': 37, 'y': 344, 'x': 480}\n",[m
[31m-      "   AoI sizes:      {'layer': 37, 'y': 344, 'x': 480}\n",[m
[31m-      "   x reduction: 1.000 (480/480 cells)\n",[m
[31m-      "   y reduction: 1.000 (344/344 cells)\n",[m
[31m-      "   Variable 'convertible': Data appears to be spatially clipped ✓\n",[m
[31m-      "\n",[m
[31m-      "📦 wel-WEL_Br_Wa_T_:\n",[m
[31m-      "   Original sizes: {'index': 846, 'time': 2}\n",[m
[31m-      "   AoI sizes:      {'index': 23, 'time': 2}\n",[m
[31m-      "   Variable 'x': Non-spatial data\n",[m
[31m-      "\n",[m
[31m-      "📦 wel-WEL_Ind_Br_T:\n",[m
[31m-      "   Original sizes: {'index': 860, 'time': 2}\n",[m
[31m-      "   AoI sizes:      {'index': 8, 'time': 2}\n",[m
[31m-      "   Variable 'x': Non-spatial data\n",[m
[31m-      "\n"[m
[31m-     ][m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
     "# Analyze the data content of common packages\n",[m
     "print(\"=== PACKAGE DATA COMPARISON ===\")\n",[m
[36m@@ -29043,37 +770,10 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 38,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "ce53d047",[m
    "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "name": "stdout",[m
[31m-     "output_type": "stream",[m
[31m-     "text": [[m
[31m-      "=== COORDINATE BOUNDS COMPARISON ===\n",[m
[31m-      "Target clipping bounds: X(113100.0, 125100.0), Y(387600.0, 396200.0)\n",[m
[31m-      "\n",[m
[31m-      "Original model bounds:\n",[m
[31m-      "   X: 113112.5 to 125087.5 (range: 11975.0)\n",[m
[31m-      "   Y: 387612.5 to 396187.5 (range: 8575.0)\n",[m
[31m-      "\n",[m
[31m-      "AoI model bounds:\n",[m
[31m-      "   X: 113112.5 to 125087.5 (range: 11975.0)\n",[m
[31m-      "   Y: 387612.5 to 396187.5 (range: 8575.0)\n",[m
[31m-      "\n",[m
[31m-      "Clipping verification:\n",[m
[31m-      "   X bounds within target: ✓\n",[m
[31m-      "   Y bounds within target: ✓\n",[m
[31m-      "   🎉 Clipping successful!\n",[m
[31m-      "\n",[m
[31m-      "Area reduction:\n",[m
[31m-      "   Original area: 102,685,625 m²\n",[m
[31m-      "   AoI area: 102,685,625 m²\n",[m
[31m-      "   Ratio: 1.0000 (100.00%)\n"[m
[31m-     ][m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
     "# Compare coordinate bounds to verify clipping worked correctly\n",[m
     "print(\"=== COORDINATE BOUNDS COMPARISON ===\")\n",[m
[36m@@ -29133,33 +833,10 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 39,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "91717a4d",[m
    "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "name": "stdout",[m
[31m-     "output_type": "stream",[m
[31m-     "text": [[m
[31m-      "=== COMMON PACKAGES ===\n",[m
[31m-      "These 14 packages are present in both models:\n",[m
[31m-      " 1. chd_merged\n",[m
[31m-      " 2. dis\n",[m
[31m-      " 3. drn-1\n",[m
[31m-      " 4. drn-2\n",[m
[31m-      " 5. drn-3\n",[m
[31m-      " 6. ic\n",[m
[31m-      " 7. msw-rch\n",[m
[31m-      " 8. msw-sprinkling\n",[m
[31m-      " 9. npf\n",[m
[31m-      "10. oc\n",[m
[31m-      "11. riv-1riv\n",[m
[31m-      "12. sto\n",[m
[31m-      "13. wel-WEL_Br_Wa_T_\n",[m
[31m-      "14. wel-WEL_Ind_Br_T\n"[m
[31m-     ][m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
     "# Print the names of common packages\n",[m
     "print(\"=== COMMON PACKAGES ===\")\n",[m
[36m@@ -29170,105 +847,30 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 40,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "cb5891a3",[m
    "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "text/plain": [[m
[31m-       "KeysView(GroundwaterFlowModel(\n",[m
[31m-       "    listing_file=None,\n",[m
[31m-       "    print_input=False,\n",[m
[31m-       "    print_flows=False,\n",[m
[31m-       "    save_flows=False,\n",[m
[31m-       "    newton=False,\n",[m
[31m-       "    under_relaxation=False,\n",[m
[31m-       "){\n",[m
[31m-       "    'dis': StructuredDiscretization,\n",[m
[31m-       "    'npf': NodePropertyFlow,\n",[m
[31m-       "    'sto': StorageCoefficient,\n",[m
[31m-       "    'ic': InitialConditions,\n",[m
[31m-       "    'wel-WEL_Ind_Br_T': Well,\n",[m
[31m-       "    'wel-WEL_Br_Wa_T_': Well,\n",[m
[31m-       "    'msw-sprinkling': LayeredWell,\n",[m
[31m-       "    'msw-rch': Recharge,\n",[m
[31m-       "    'drn-1': Drainage,\n",[m
[31m-       "    'drn-2': Drainage,\n",[m
[31m-       "    'drn-3': Drainage,\n",[m
[31m-       "    'riv-1riv': River,\n",[m
[31m-       "    'chd_merged': ConstantHead,\n",[m
[31m-       "    'oc': OutputControl,\n",[m
[31m-       "})"[m
[31m-      ][m
[31m-     },[m
[31m-     "execution_count": 40,[m
[31m-     "metadata": {},[m
[31m-     "output_type": "execute_result"[m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
     "MF6_Mdl_AoI.keys()"[m
    ][m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 41,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "ae1b8e50",[m
    "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "text/plain": [[m
[31m-       "<matplotlib.image.AxesImage at 0x2ac9ffe1d10>"[m
[31m-      ][m
[31m-     },[m
[31m-     "execution_count": 41,[m
[31m-     "metadata": {},[m
[31m-     "output_type": "execute_result"[m
[31m-    },[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "image/png": "",[m
[31m-      "text/plain": [[m
[31m-       "<Figure size 640x480 with 2 Axes>"[m
[31m-      ][m
[31m-     },[m
[31m-     "metadata": {},[m
[31m-     "output_type": "display_data"[m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
     "MF6_Mdl['chd_merged']['head'].isel(time=0, layer=0).isel(x=range(0,10), y=range(0,10)).plot.imshow(cmap='viridis')"[m
    ][m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 42,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "1bc6f585",[m
    "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "text/plain": [[m
[31m-       "<matplotlib.image.AxesImage at 0x2acabd787d0>"[m
[31m-      ][m
[31m-     },[m
[31m-     "execution_count": 42,[m
[31m-     "metadata": {},[m
[31m-     "output_type": "execute_result"[m
[31m-    },[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "image/png": "",[m
[31m-      "text/plain": [[m
[31m-       "<Figure size 640x480 with 2 Axes>"[m
[31m-      ][m
[31m-     },[m
[31m-     "metadata": {},[m
[31m-     "output_type": "display_data"[m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
     "MF6_Mdl_AoI['chd_merged']['head'].isel(time=0, layer=0).plot.imshow(cmap='viridis')"[m
    ][m
[36m@@ -29299,7 +901,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 43,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "f977772d",[m
    "metadata": {},[m
    "outputs": [],[m
[36m@@ -29321,7 +923,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 44,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "dfadb000",[m
    "metadata": {},[m
    "outputs": [],[m
[36m@@ -29340,7 +942,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 45,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "8e4be448",[m
    "metadata": {},[m
    "outputs": [],[m
[36m@@ -29351,7 +953,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 54,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "c1a52b72",[m
    "metadata": {},[m
    "outputs": [],[m
[36m@@ -29361,7 +963,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 47,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "802caf67",[m
    "metadata": {},[m
    "outputs": [],[m
[36m@@ -29373,7 +975,7 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 55,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "682653d8",[m
    "metadata": {},[m
    "outputs": [],[m
[36m@@ -29391,142 +993,10 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 52,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "7e0bc60d",[m
    "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "text/html": [[m
[31m-       "<div>\n",[m
[31m-       "<style scoped>\n",[m
[31m-       "    .dataframe tbody tr th:only-of-type {\n",[m
[31m-       "        vertical-align: middle;\n",[m
[31m-       "    }\n",[m
[31m-       "\n",[m
[31m-       "    .dataframe tbody tr th {\n",[m
[31m-       "        vertical-align: top;\n",[m
[31m-       "    }\n",[m
[31m-       "\n",[m
[31m-       "    .dataframe thead th {\n",[m
[31m-       "        text-align: right;\n",[m
[31m-       "    }\n",[m
[31m-       "</style>\n",[m
[31m-       "<table border=\"1\" class=\"dataframe\">\n",[m
[31m-       "  <thead>\n",[m
[31m-       "    <tr style=\"text-align: right;\">\n",[m
[31m-       "      <th></th>\n",[m
[31m-       "      <th>exec_count</th>\n",[m
[31m-       "      <th>seconds</th>\n",[m
[31m-       "      <th>label</th>\n",[m
[31m-       "    </tr>\n",[m
[31m-       "  </thead>\n",[m
[31m-       "  <tbody>\n",[m
[31m-       "    <tr>\n",[m
[31m-       "      <th>0</th>\n",[m
[31m-       "      <td>18</td>\n",[m
[31m-       "      <td>6.044033e+01</td>\n",[m
[31m-       "      <td>Sim_MF6 = mf6.Modflow6Simulation.from_imod5_da...</td>\n",[m
[31m-       "    </tr>\n",[m
[31m-       "    <tr>\n",[m
[31m-       "      <th>1</th>\n",[m
[31m-       "      <td>49</td>\n",[m
[31m-       "      <td>1.717024e+01</td>\n",[m
[31m-       "      <td>metamod.write(directory=d_Pa['Pa_MdlN'], modfl...</td>\n",[m
[31m-       "    </tr>\n",[m
[31m-       "    <tr>\n",[m
[31m-       "      <th>2</th>\n",[m
[31m-       "      <td>51</td>\n",[m
[31m-       "      <td>1.656268e+01</td>\n",[m
[31m-       "      <td>PRJ_, PRJ_OBS = UIM.o_PRJ_with_OBS(Pa_PRJ)</td>\n",[m
[31m-       "    </tr>\n",[m
[31m-       "    <tr>\n",[m
[31m-       "      <th>3</th>\n",[m
[31m-       "      <td>11</td>\n",[m
[31m-       "      <td>1.079746e+01</td>\n",[m
[31m-       "      <td>PRJ_, PRJ_OBS = UIM.o_PRJ_with_OBS(Pa_PRJ)</td>\n",[m
[31m-       "    </tr>\n",[m
[31m-       "    <tr>\n",[m
[31m-       "      <th>4</th>\n",[m
[31m-       "      <td>26</td>\n",[m
[31m-       "      <td>8.888007e+00</td>\n",[m
[31m-       "      <td>Sim_MF6_AoI = Sim_MF6.clip_box(x_min=Xmin, x_m...</td>\n",[m
[31m-       "    </tr>\n",[m
[31m-       "    <tr>\n",[m
[31m-       "      <th>...</th>\n",[m
[31m-       "      <td>...</td>\n",[m
[31m-       "      <td>...</td>\n",[m
[31m-       "      <td>...</td>\n",[m
[31m-       "    </tr>\n",[m
[31m-       "    <tr>\n",[m
[31m-       "      <th>59</th>\n",[m
[31m-       "      <td>8</td>\n",[m
[31m-       "      <td>1.033500e-03</td>\n",[m
[31m-       "      <td>MdlN = 'NBr32'</td>\n",[m
[31m-       "    </tr>\n",[m
[31m-       "    <tr>\n",[m
[31m-       "      <th>60</th>\n",[m
[31m-       "      <td>36</td>\n",[m
[31m-       "      <td>1.015500e-03</td>\n",[m
[31m-       "      <td>MF6_Mdl_AoI = Sim_MF6_AoI['imported_model']</td>\n",[m
[31m-       "    </tr>\n",[m
[31m-       "    <tr>\n",[m
[31m-       "      <th>61</th>\n",[m
[31m-       "      <td>14</td>\n",[m
[31m-       "      <td>8.548000e-04</td>\n",[m
[31m-       "      <td>BND = PRJ_regrid['bnd']['ibound']</td>\n",[m
[31m-       "    </tr>\n",[m
[31m-       "    <tr>\n",[m
[31m-       "      <th>62</th>\n",[m
[31m-       "      <td>4</td>\n",[m
[31m-       "      <td>8.496000e-04</td>\n",[m
[31m-       "      <td>import matplotlib.pyplot as plt</td>\n",[m
[31m-       "    </tr>\n",[m
[31m-       "    <tr>\n",[m
[31m-       "      <th>63</th>\n",[m
[31m-       "      <td>2</td>\n",[m
[31m-       "      <td>-5.999900e-07</td>\n",[m
[31m-       "      <td># Put this in the FIRST cell and run it once</td>\n",[m
[31m-       "    </tr>\n",[m
[31m-       "  </tbody>\n",[m
[31m-       "</table>\n",[m
[31m-       "<p>64 rows × 3 columns</p>\n",[m
[31m-       "</div>"[m
[31m-      ],[m
[31m-      "text/plain": [[m
[31m-       "    exec_count       seconds  \\\n",[m
[31m-       "0           18  6.044033e+01   \n",[m
[31m-       "1           49  1.717024e+01   \n",[m
[31m-       "2           51  1.656268e+01   \n",[m
[31m-       "3           11  1.079746e+01   \n",[m
[31m-       "4           26  8.888007e+00   \n",[m
[31m-       "..         ...           ...   \n",[m
[31m-       "59           8  1.033500e-03   \n",[m
[31m-       "60          36  1.015500e-03   \n",[m
[31m-       "61          14  8.548000e-04   \n",[m
[31m-       "62           4  8.496000e-04   \n",[m
[31m-       "63           2 -5.999900e-07   \n",[m
[31m-       "\n",[m
[31m-       "                                                label  \n",[m
[31m-       "0   Sim_MF6 = mf6.Modflow6Simulation.from_imod5_da...  \n",[m
[31m-       "1   metamod.write(directory=d_Pa['Pa_MdlN'], modfl...  \n",[m
[31m-       "2          PRJ_, PRJ_OBS = UIM.o_PRJ_with_OBS(Pa_PRJ)  \n",[m
[31m-       "3          PRJ_, PRJ_OBS = UIM.o_PRJ_with_OBS(Pa_PRJ)  \n",[m
[31m-       "4   Sim_MF6_AoI = Sim_MF6.clip_box(x_min=Xmin, x_m...  \n",[m
[31m-       "..                                                ...  \n",[m
[31m-       "59                                     MdlN = 'NBr32'  \n",[m
[31m-       "60        MF6_Mdl_AoI = Sim_MF6_AoI['imported_model']  \n",[m
[31m-       "61                  BND = PRJ_regrid['bnd']['ibound']  \n",[m
[31m-       "62                    import matplotlib.pyplot as plt  \n",[m
[31m-       "63       # Put this in the FIRST cell and run it once  \n",[m
[31m-       "\n",[m
[31m-       "[64 rows x 3 columns]"[m
[31m-      ][m
[31m-     },[m
[31m-     "metadata": {},[m
[31m-     "output_type": "display_data"[m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
     "t = show_cell_times()"[m
    ][m
[36m@@ -29541,75 +1011,10 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": 61,[m
[32m+[m[32m   "execution_count": null,[m
    "id": "f067378d",[m
    "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "name": "stdout",[m
[31m-     "output_type": "stream",[m
[31m-     "text": [[m
[31m-      "🚀 Starting coupled model execution...\n",[m
[31m-      "Model directory: C:/OD/WS_Mdl\\models/NBr\\Sim/NBr32\n",[m
[31m-      "\n",[m
[31m-      "📁 Checking written model files:\n",[m
[31m-      "  - exchanges\n",[m
[31m-      "  - imod_coupler.toml\n",[m
[31m-      "  - metaswap\n",[m
[31m-      "  - modflow6\n",[m
[31m-      "\n",[m
[31m-      "🎯 Found TOML configuration file: imod_coupler.toml\n",[m
[31m-      "✅ Found iMOD coupler: C:\\OD\\WS_Mdl\\software\\iMOD5\\bin\\iMOD_coupler\\imodc.exe\n",[m
[31m-      "🔄 Executing: C:\\OD\\WS_Mdl\\software\\iMOD5\\bin\\iMOD_coupler\\imodc.exe C:/OD/WS_Mdl\\models/NBr\\Sim/NBr32\\imod_coupler.toml\n",[m
[31m-      "Return code: 1\n",[m
[31m-      "STDERR:\n",[m
[31m-      "iMOD Coupler: \u001b[1miMOD Coupler 0.11.0-dev\u001b[0m\n",[m
[31m-      "iMOD Coupler: \u001b[31m\u001b[1miMOD Coupler run failed with: \u001b[0m\n",[m
[31m-      "\u001b[33m\u001b[1mTraceback (most recent call last):\u001b[0m\n",[m
[31m-      "\n",[m
[31m-      "  File \"\u001b[32mimod_coupler\\\u001b[0m\u001b[32m\u001b[1m__main__.py\u001b[0m\", line \u001b[33m57\u001b[0m, in \u001b[35m<module>\u001b[0m\n",[m
[31m-      "\n",[m
[31m-      "> File \"\u001b[32mimod_coupler\\\u001b[0m\u001b[32m\u001b[1m__main__.py\u001b[0m\", line \u001b[33m26\u001b[0m, in \u001b[35mmain\u001b[0m\n",[m
[31m-      "\n",[m
[31m-      "  File \"\u001b[32mimod_coupler\\\u001b[0m\u001b[32m\u001b[1m__main__.py\u001b[0m\", line \u001b[33m45\u001b[0m, in \u001b[35mrun_coupler\u001b[0m\n",[m
[31m-      "\n",[m
[31m-      "  File \"\u001b[32mimod_coupler\\drivers\\\u001b[0m\u001b[32m\u001b[1mdriver.py\u001b[0m\", line \u001b[33m70\u001b[0m, in \u001b[35mget_driver\u001b[0m\n",[m
[31m-      "\n",[m
[31m-      "  File \"\u001b[32mimod_coupler\\drivers\\metamod\\\u001b[0m\u001b[32m\u001b[1mconfig.py\u001b[0m\", line \u001b[33m89\u001b[0m, in \u001b[35m__init__\u001b[0m\n",[m
[31m-      "\n",[m
[31m-      "  File \"\u001b[32mpydantic\\\u001b[0m\u001b[32m\u001b[1mmain.py\u001b[0m\", line \u001b[33m341\u001b[0m, in \u001b[35mpydantic.main.BaseModel.__init__\u001b[0m\n",[m
[31m-      "\n",[m
[31m-      "\u001b[31m\u001b[1mpydantic.error_wrappers.ValidationError\u001b[0m:\u001b[1m 1 validation error for MetaModConfig\n",[m
[31m-      "coupling -> 0 -> enable_sprinkling\n",[m
[31m-      "  field required (type=value_error.missing)\u001b[0m\n",[m
[31m-      "\n",[m
[31m-      "❌ Model execution failed with return code 1\n",[m
[31m-      "Return code: 1\n",[m
[31m-      "STDERR:\n",[m
[31m-      "iMOD Coupler: \u001b[1miMOD Coupler 0.11.0-dev\u001b[0m\n",[m
[31m-      "iMOD Coupler: \u001b[31m\u001b[1miMOD Coupler run failed with: \u001b[0m\n",[m
[31m-      "\u001b[33m\u001b[1mTraceback (most recent call last):\u001b[0m\n",[m
[31m-      "\n",[m
[31m-      "  File \"\u001b[32mimod_coupler\\\u001b[0m\u001b[32m\u001b[1m__main__.py\u001b[0m\", line \u001b[33m57\u001b[0m, in \u001b[35m<module>\u001b[0m\n",[m
[31m-      "\n",[m
[31m-      "> File \"\u001b[32mimod_coupler\\\u001b[0m\u001b[32m\u001b[1m__main__.py\u001b[0m\", line \u001b[33m26\u001b[0m, in \u001b[35mmain\u001b[0m\n",[m
[31m-      "\n",[m
[31m-      "  File \"\u001b[32mimod_coupler\\\u001b[0m\u001b[32m\u001b[1m__main__.py\u001b[0m\", line \u001b[33m45\u001b[0m, in \u001b[35mrun_coupler\u001b[0m\n",[m
[31m-      "\n",[m
[31m-      "  File \"\u001b[32mimod_coupler\\drivers\\\u001b[0m\u001b[32m\u001b[1mdriver.py\u001b[0m\", line \u001b[33m70\u001b[0m, in \u001b[35mget_driver\u001b[0m\n",[m
[31m-      "\n",[m
[31m-      "  File \"\u001b[32mimod_coupler\\drivers\\metamod\\\u001b[0m\u001b[32m\u001b[1mconfig.py\u001b[0m\", line \u001b[33m89\u001b[0m, in \u001b[35m__init__\u001b[0m\n",[m
[31m-      "\n",[m
[31m-      "  File \"\u001b[32mpydantic\\\u001b[0m\u001b[32m\u001b[1mmain.py\u001b[0m\", line \u001b[33m341\u001b[0m, in \u001b[35mpydantic.main.BaseModel.__init__\u001b[0m\n",[m
[31m-      "\n",[m
[31m-      "\u001b[31m\u001b[1mpydantic.error_wrappers.ValidationError\u001b[0m:\u001b[1m 1 validation error for MetaModConfig\n",[m
[31m-      "coupling -> 0 -> enable_sprinkling\n",[m
[31m-      "  field required (type=value_error.missing)\u001b[0m\n",[m
[31m-      "\n",[m
[31m-      "❌ Model execution failed with return code 1\n"[m
[31m-     ][m
[31m-    }[m
[31m-   ],[m
[32m+[m[32m   "outputs": [],[m
    "source": [[m
     "# Execute the coupled model\n",[m
     "print(\"🚀 Starting coupled model execution...\")\n",[m
[1mdiff --git a/code/WS_Mdl/utils.py b/code/WS_Mdl/utils.py[m
[1mindex af0583f..a810be3 100644[m
[1m--- a/code/WS_Mdl/utils.py[m
[1m+++ b/code/WS_Mdl/utils.py[m
[36m@@ -10,6 +10,7 @@[m [mfrom io import StringIO[m
 from multiprocessing import Pool, cpu_count[m
 from os import listdir as LD[m
 from os.path import basename as PBN[m
[32m+[m[32mfrom os.path import dirname as PDN[m
 from os.path import join as PJ[m
 from pathlib import Path[m
 [m
[36m@@ -151,6 +152,7 @@[m [mdef get_MdlN_Pa(MdlN: str, MdlN_B=None, verbose=False):[m
 [m
         d_Pa['Sim'] = PJ(d_Pa['Pa_Mdl'], 'Sim')  # Sim folder[m
         d_Pa['Pa_MdlN'] = PJ(d_Pa['Pa_Mdl'], f'Sim/{MdlN}')[m
[32m+[m[32m        d_Pa['TOML'] = PJ(d_Pa['Pa_MdlN'], 'imod_coupler.toml')[m
         d_Pa['LST_Sim'] = PJ(d_Pa['Pa_MdlN'], 'mfsim.lst')  # Sim LST file[m
         d_Pa['LST_Mdl'] = PJ(d_Pa['Pa_MdlN'], f'GWF_1/{MdlN}.lst')  # Mdl LST file[m
         d_Pa['NAM_Sim'] = PJ(d_Pa['Pa_MdlN'], 'MFSIM.NAM')  # Sim LST file[m
[36m@@ -923,9 +925,8 @@[m [mdef freeze_pixi_env(MdlN: str):[m
 [m
         # Commit with timestamp[m
         now = DT.now().strftime('%Y-%m-%d %H:%M:%S')[m
[31m-        commit_msg = f'{MdlN} env snapshot - {now}'[m
[32m+[m[32m        commit_msg = f'#auto {MdlN} env snapshot - {now}'[m
         run_cmd(['git', 'commit', '-m', commit_msg])[m
[31m-        print(f"🟢🟢🟢 Committed changes with message: '{commit_msg}'")[m
 [m
         # Get the commit hash of the just-created commit[m
         commit_hash = run_cmd(['git', 'rev-parse', 'HEAD'], capture=True).stdout.strip()[m
[36m@@ -940,6 +941,8 @@[m [mdef freeze_pixi_env(MdlN: str):[m
             tag = '-'[m
             print('⚪️ No tag found for this commit. Only the hash will be recorded.')[m
 [m
[32m+[m[32m        print(f"🟢🟢🟢 Committed changes with message: '{commit_msg}'")[m
[32m+[m
         return commit_hash, tag[m
 [m
     except sp.CalledProcessError as e:[m
[36m@@ -947,6 +950,21 @@[m [mdef freeze_pixi_env(MdlN: str):[m
         sys.exit(1)[m
 [m
 [m
[32m+[m[32mdef Mdl_Prep(MdlN: str):[m
[32m+[m[32m    set_verbose(False)[m
[32m+[m
[32m+[m[32m    # Load paths and variables from PRJ & INI[m
[32m+[m[32m    d_Pa = get_MdlN_Pa(MdlN)[m
[32m+[m[32m    Pa_PRJ = d_Pa['PRJ'][m
[32m+[m[32m    Dir_PRJ = PDN(Pa_PRJ)[m
[32m+[m[32m    d_INI = INI_to_d(d_Pa['INI'])[m
[32m+[m[32m    Xmin, Ymin, Xmax, Ymax = [float(i) for i in d_INI['WINDOW'].split(',')][m
[32m+[m[32m    SP_date_1st, SP_date_last = [[m
[32m+[m[32m        DT.strftime(DT.strptime(d_INI[f'{i}'], '%Y%m%d'), '%Y-%m-%d') for i in ['SDATE', 'EDATE'][m
[32m+[m[32m    ][m
[32m+[m[32m    dx = dy = float(d_INI['CELLSIZE'])[m
[32m+[m
[32m+[m
 # --------------------------------------------------------------------------------[m
 [m
 [m
[1mdiff --git a/code/WS_Mdl/utils_imod.py b/code/WS_Mdl/utils_imod.py[m
[1mindex 1188812..3421626 100644[m
[1m--- a/code/WS_Mdl/utils_imod.py[m
[1m+++ b/code/WS_Mdl/utils_imod.py[m
[36m@@ -7,6 +7,7 @@[m [mfrom os.path import basename as PBN[m
 from os.path import dirname as PDN[m
 from os.path import exists as PE[m
 from os.path import join as PJ[m
[32m+[m[32mfrom datetime import datetime as DT[m
 [m
 import imod[m
 [m
[36m@@ -16,8 +17,10 @@[m [mimport pandas as pd[m
 import xarray as xr[m
 from filelock import FileLock as FL[m
 from imod import mf6[m
[32m+[m[32mfrom imod import msw[m
 from tqdm import tqdm  # Track progress of the loop[m
 [m
[32m+[m[32mfrom WS_Mdl import utils as U[m
 from .utils import ([m
     INI_to_d,[m
     Mdl_Dmns_from_INI,[m
[36m@@ -35,7 +38,7 @@[m [mcustom_characters = {[m
     'positive': '🟢',[m
     'no action required': '⚪️',[m
     'already done': '⚫️',[m
[31m-}[m
[32m+[m[32m} # Rule for using multiple e.g. 🟢🟢🟢. Use 2 when a function returns an object. Use 3 for more impactful functions that save a file, or complete a longer process, like commiting git changes. In all other cases use 1.[m
 [m
 [m
 # PRJ related --------------------------------------------------------------------[m
[36m@@ -135,7 +138,7 @@[m [mdef PRJ_to_DF(MdlN):[m
             DF.loc[f'{Pkg_name.upper()}'] = '-'[m
             DF.loc[f'{Pkg_name.upper()}', 'active'] = f'Failed to read package: {e}'[m
             vprint('🟡')[m
[31m-    vprint('🟢🟢🟢')[m
[32m+[m[32m    vprint('🟢🟢')[m
     vprint(f' {"-" * 100}')[m
 [m
     DF['package'] = DF['package'].str.replace('(', '').str.replace(')', '').str.upper()[m
[36m@@ -189,6 +192,7 @@[m [mdef o_PRJ_with_OBS(Pa_PRJ):[m
     PRJ = imod.prj.open_projectfile_data(Pa_PRJ_temp)  # Load the PRJ file without OBS[m
     os.remove(Pa_PRJ_temp)  # Delete temp PRJ file as it's not needed anymore.[m
 [m
[32m+[m[32m    vprint(f'🟢🟢 - PRJ loaded from {Pa_PRJ}')[m
     return PRJ, l_OBS_Lns[m
 [m
 [m
[36m@@ -267,7 +271,7 @@[m [mdef regrid_PRJ(PRJ, MdlN: str = None, x_CeCes=None, y_CeCes=None, method='linear[m
             # Handle top-level data[m
             PRJ_regridded[key] = regrid_DA(data, x_CeCes, y_CeCes, dx, dy, key, method)[m
 [m
[31m-    vprint('🟢🟢🟢 - Regridding complete.')[m
[32m+[m[32m    vprint('🟢🟢🟢 - PRJ has been regridded successfully!')[m
     return PRJ_regridded[m
 [m
 [m
[36m@@ -385,6 +389,326 @@[m [mdef mete_grid_Cvt_to_AbsPa(Pa_PRJ: str, PRJ: dict = None):[m
 [m
 # --------------------------------------------------------------------------------[m
 [m
[32m+[m[32m# Mdl related -----------------------------------------------------------------[m
[32m+[m
[32m+[m[32mdef Mdl_Prep(MdlN: str):[m
[32m+[m
[32m+[m
[32m+[m[32m    # Load paths and variables from PRJ & INI[m
[32m+[m[32m    d_Pa = get_MdlN_Pa(MdlN)[m
[32m+[m[32m    Pa_PRJ = d_Pa['PRJ'][m
[32m+[m[32m    Dir_PRJ = PDN(Pa_PRJ)[m
[32m+[m[32m    d_INI = INI_to_d(d_Pa['INI'])[m
[32m+[m[32m    Xmin, Ymin, Xmax, Ymax = [float(i) for i in d_INI['WINDOW'].split(',')][m
[32m+[m[32m    SP_date_1st, SP_date_last = [[m
[32m+[m[32m        DT.strftime(DT.strptime(d_INI[f'{i}'], '%Y%m%d'), '%Y-%m-%d') for i in ['SDATE', 'EDATE'][m
[32m+[m[32m    ][m
[32m+[m[32m    dx = dy = float(d_INI['CELLSIZE'])[m
[32m+[m
[32m+[m
[32m+[m[32m    # Load PRJ & regrid it to Mdl Aa[m
[32m+[m[32m    PRJ_, PRJ_OBS = o_PRJ_with_OBS(Pa_PRJ)[m
[32m+[m[32m    PRJ, period_data = PRJ_[0], PRJ_[1][m
[32m+[m[32m    PRJ_regrid = regrid_PRJ(PRJ, MdlN) # Using original PRJ to load MF6 Mdl gives warnings (and it's very slow). Regridding works much better though.[m
[32m+[m
[32m+[m[32m    # Set outer boundaries to -1. Otherwise CHD won't be loaded properly.[m
[32m+[m[32m    BND = PRJ_regrid['bnd']['ibound'][m
[32m+[m[32m    BND.loc[:, [BND.y[0], BND.y[-1]], :] = -1  # Top and bottom rows[m
[32m+[m[32m    BND.loc[:, :, [BND.x[0], BND.x[-1]]] = -1  # Left and right columns[m
[32m+[m[32m    vprint("🟢 - Boundary conditions set successfully!")[m
[32m+[m[41m    [m
[32m+[m[32m    # Load MF6 Simulation[m
[32m+[m[32m    times = pd.date_range(SP_date_1st, SP_date_last, freq='D')[m
[32m+[m[32m    Sim_MF6 = mf6.Modflow6Simulation.from_imod5_data(PRJ_regrid, period_data, times) # It can be further sped up by multi-processing, but this is not implemented yet.[m
[32m+[m[32m    vprint("🟢 - MF6 Simulation loaded successfully!")[m
[32m+[m[32m    Sim_MF6[f'{MdlN}'] = Sim_MF6.pop('imported_model')  # Rename imported_model to MdlN.[m
[32m+[m[41m    [m
[32m+[m[32m    # Pass the Sim components to objects.[m
[32m+[m[32m    MF6_Mdl = Sim_MF6[f'{MdlN}'][m
[32m+[m[32m    MF6_Mdl["oc"] = mf6.OutputControl(save_head="last", save_budget="last")[m
[32m+[m[32m    Sim_MF6["ims"] = mf6_solution_moderate_settings() # Mimic iMOD5's "Moderate" settings.[m
[32m+[m[32m    MF6_DIS = Sim_MF6[f'{MdlN}']["dis"][m
[32m+[m
[32m+[m[32m    # Load MSW[m
[32m+[m[32m    PRJ_MSW = {'cap': PRJ_regrid.copy()['cap'], 'extra': PRJ_regrid.copy()['extra']} # Isolate MSW keys from PRJ.[m
[32m+[m[32m    PRJ_MSW['extra']['paths'][2][0] = mete_grid_Cvt_to_AbsPa(Pa_PRJ, PRJ) ## Fix mete_grid.inp relative paths. Replace the mete_grid.inp path in the PRJ_MSW_for_MSW dictionary[m
[32m+[m[32m    MSW_Mdl = msw.MetaSwapModel.from_imod5_data(PRJ_MSW, MF6_DIS, times) # Load MSW model from PRJ[m
[32m+[m[32m    vprint("🟢 - MSW Simulation loaded successfully!")[m
[32m+[m
[32m+[m[32m    # Clip models[m
[32m+[m[32m    Sim_MF6_AoI = Sim_MF6.clip_box(x_min=Xmin, x_max=Xmax, y_min=Ymin, y_max=Ymax)[m
[32m+[m[32m    MF6_Mdl_AoI = Sim_MF6_AoI[f'{MdlN}'][m
[32m+[m[32m    MSW_Mdl_AoI = MSW_Mdl.clip_box(x_min=Xmin, x_max=Xmax, y_min=Ymin, y_max=Ymax) # clip_box doesn't clip the packages I clipped beforehand, but it clips non raster-like packages like WEL and removes packages that are not in the AoI.[m
[32m+[m[32m    print(f"MF6 Model AoI DIS shape: {MF6_Mdl_AoI['dis'].dataset.sizes}")[m
[32m+[m[32m    print(f"MSW Model AoI grid shape: {MSW_Mdl_AoI['grid'].dataset.sizes}")[m
[32m+[m[32m    print("🟢 Both models successfully clipped to Area of Interest with compatible discretization!")[m
[32m+[m
[32m+[m[32m    MF6_Mdl_AoI['dis'].dataset.equals(MF6_Mdl['dis'].dataset)[m
[32m+[m
[32m+[m[32m    # Sense check code to ensure the AoI models are correct exists in imod_python_init_NBr32.ipynb[m
[32m+[m
[32m+[m[32m    # Load models into memory[m
[32m+[m[32m    for pkg in MF6_Mdl_AoI.values():[m
[32m+[m[32m        pkg.dataset.load()[m
[32m+[m
[32m+[m[32m    for pkg in MSW_Mdl_AoI.values():[m
[32m+[m[32m        pkg.dataset.load()[m
[32m+[m
[32m+[m[32m    # Cleanup[m
[32m+[m[41m    [m
[32m+[m[32m    # MF6[m
[32m+[m[32m    # Create mask from current regridded model (not the old one)[m
[32m+[m[32m    mask = MF6_Mdl_AoI.domain #666 mask needs to be checked and potentially updated with -1 values at the edge of the Mdl Aa.[m
[32m+[m[32m    Sim_MF6_AoI.mask_all_models(mask)[m
[32m+[m[32m    DIS_AoI = MF6_Mdl_AoI["dis"][m
[32m+[m[41m    [m
[32m+[m[32m    ### Check if the packages are the same[m
[32m+[m[32m    MF6_Mdl_AoI = Sim_MF6_AoI[f'{MdlN}'][m
[32m+[m[32m    # Compare the keys of both models[m
[32m+[m[32m    keys_equal = MF6_Mdl.keys() == MF6_Mdl_AoI.keys()[m
[32m+[m[32m    print(f"Are the keys identical? {keys_equal}")[m
[32m+[m[32m    print()[m
[32m+[m
[32m+[m[32m    # Get the actual keys for detailed comparison[m
[32m+[m[32m    original_keys = set(MF6_Mdl.keys())[m
[32m+[m[32m    aoi_keys = set(MF6_Mdl_AoI.keys())[m
[32m+[m
[32m+[m[32m    print("=== DETAILED KEY COMPARISON ===")[m
[32m+[m[32m    print(f"Original model has {len(original_keys)} packages:")[m
[32m+[m[32m    for key in sorted(original_keys):[m
[32m+[m[32m        print(f"  - {key}")[m
[32m+[m
[32m+[m[32m    print(f"\nAoI model has {len(aoi_keys)} packages:")[m
[32m+[m[32m    for key in sorted(aoi_keys):[m
[32m+[m[32m        print(f"  - {key}")[m
[32m+[m
[32m+[m[32m    # Find differences[m
[32m+[m[32m    missing_in_aoi = original_keys - aoi_keys[m
[32m+[m[32m    extra_in_aoi = aoi_keys - original_keys[m
[32m+[m[32m    common_keys = original_keys & aoi_keys[m
[32m+[m
[32m+[m[32m    print(f"\n=== DIFFERENCES ===")[m
[32m+[m[32m    if missing_in_aoi:[m
[32m+[m[32m        print(f"Packages REMOVED in AoI model ({len(missing_in_aoi)}):")[m
[32m+[m[32m        for key in sorted(missing_in_aoi):[m
[32m+[m[32m            print(f"  ❌ {key}")[m
[32m+[m[32m            # Try to understand why it was removed[m
[32m+[m[32m            try:[m
[32m+[m[32m                pkg = MF6_Mdl[key][m
[32m+[m[32m                if hasattr(pkg, 'dataset') and hasattr(pkg.dataset, 'sizes'):[m
[32m+[m[32m                    print(f"     Size in original: {dict(pkg.dataset.sizes)}")[m
[32m+[m[32m            except:[m
[32m+[m[32m                pass[m
[32m+[m[32m    else:[m
[32m+[m[32m        print("✅ No packages removed in AoI model")[m
[32m+[m
[32m+[m[32m    if extra_in_aoi:[m
[32m+[m[32m        print(f"\nPackages ADDED in AoI model ({len(extra_in_aoi)}):")[m
[32m+[m[32m        for key in sorted(extra_in_aoi):[m
[32m+[m[32m            print(f"  ➕ {key}")[m
[32m+[m[32m    else:[m
[32m+[m[32m        print("✅ No packages added in AoI model")[m
[32m+[m
[32m+[m[32m    print(f"\nCommon packages: {len(common_keys)}/{len(original_keys)} ({100*len(common_keys)/len(original_keys):.1f}%)")[m
[32m+[m
[32m+[m[32m    # Show why packages might be missing[m
[32m+[m[32m    if missing_in_aoi:[m
[32m+[m[32m        print(f"\n=== WHY PACKAGES WERE REMOVED ===")[m
[32m+[m[32m        print("Packages are typically removed from AoI models when:")[m
[32m+[m[32m        print("1. They have no data within the clipped boundary")[m
[32m+[m[32m        print("2. All their stress points/cells fall outside the AoI")[m
[32m+[m[32m        print("3. The clip_box() method filters out empty packages" \[m
[32m+[m[32m        "")[m
[32m+[m[32m        print("\nThis is normal behavior and indicates successful spatial filtering!")[m
[32m+[m[32m    # Analyze the data content of common packages[m
[32m+[m[32m    print("=== PACKAGE DATA COMPARISON ===")[m
[32m+[m[32m    print("Comparing spatial dimensions and data ranges for common packages:\n")[m
[32m+[m
[32m+[m[32m    for key in sorted(common_keys):[m
[32m+[m[32m        print(f"📦 {key}:")[m
[32m+[m[32m        try:[m
[32m+[m[32m            orig_pkg = MF6_Mdl[key][m[41m [m
[32m+[m[32m            aoi_pkg = MF6_Mdl_AoI[key][m
[32m+[m[41m            [m
[32m+[m[32m            # Compare dataset sizes[m
[32m+[m[32m            if hasattr(orig_pkg, 'dataset') and hasattr(aoi_pkg, 'dataset'):[m
[32m+[m[32m                orig_sizes = dict(orig_pkg.dataset.sizes)[m
[32m+[m[32m                aoi_sizes = dict(aoi_pkg.dataset.sizes)[m
[32m+[m[41m                [m
[32m+[m[32m                print(f"   Original sizes: {orig_sizes}")[m
[32m+[m[32m                print(f"   AoI sizes:      {aoi_sizes}")[m
[32m+[m[41m                [m
[32m+[m[32m                # Calculate reduction ratios[m
[32m+[m[32m                for dim in ['x', 'y']:[m
[32m+[m[32m                    if dim in orig_sizes and dim in aoi_sizes:[m
[32m+[m[32m                        reduction = aoi_sizes[dim] / orig_sizes[dim][m
[32m+[m[32m                        print(f"   {dim} reduction: {reduction:.3f} ({aoi_sizes[dim]}/{orig_sizes[dim]} cells)")[m
[32m+[m[41m                [m
[32m+[m[32m                # Check if data values are the same (for first few values)[m
[32m+[m[32m                if hasattr(orig_pkg.dataset, 'data_vars') and hasattr(aoi_pkg.dataset, 'data_vars'):[m
[32m+[m[32m                    common_vars = set(orig_pkg.dataset.data_vars) & set(aoi_pkg.dataset.data_vars)[m
[32m+[m[32m                    if common_vars:[m
[32m+[m[32m                        var = list(common_vars)[0]  # Check first variable[m
[32m+[m[32m                        orig_data = orig_pkg.dataset[var][m
[32m+[m[32m                        aoi_data = aoi_pkg.dataset[var][m
[32m+[m[41m                        [m
[32m+[m[32m                        # Check if AoI data is a subset of original[m
[32m+[m[32m                        if 'x' in orig_data.dims and 'y' in orig_data.dims:[m
[32m+[m[32m                            print(f"   Variable '{var}': Data appears to be spatially clipped ✓")[m
[32m+[m[32m                        else:[m
[32m+[m[32m                            print(f"   Variable '{var}': Non-spatial data")[m
[32m+[m[32m            else:[m
[32m+[m[32m                print("   No dataset attributes to compare")[m
[32m+[m[41m                [m
[32m+[m[32m        except Exception as e:[m
[32m+[m[32m            print(f"   ⚠️  Error comparing {key}: {e}")[m
[32m+[m[41m        [m
[32m+[m[32m        print()  # Empty line for readability[m
[32m+[m[32m    # Compare coordinate bounds to verify clipping worked correctly[m
[32m+[m[32m    print("=== COORDINATE BOUNDS COMPARISON ===")[m
[32m+[m[32m    print(f"Target clipping bounds: X({Xmin:.1f}, {Xmax:.1f}), Y({Ymin:.1f}, {Ymax:.1f})")[m
[32m+[m[32m    print()[m
[32m+[m
[32m+[m[32m    # Check DIS package bounds (most reliable for spatial extent)[m
[32m+[m[32m    if 'dis' in common_keys:[m
[32m+[m[32m        try:[m
[32m+[m[32m            orig_dis = MF6_Mdl['dis'][m
[32m+[m[32m            aoi_dis = MF6_Mdl_AoI['dis'][m
[32m+[m[41m            [m
[32m+[m[32m            # Original bounds[m
[32m+[m[32m            orig_x_min, orig_x_max = float(orig_dis.dataset.x.min()), float(orig_dis.dataset.x.max())[m
[32m+[m[32m            orig_y_min, orig_y_max = float(orig_dis.dataset.y.min()), float(orig_dis.dataset.y.max())[m
[32m+[m[41m            [m
[32m+[m[32m            # AoI bounds[m[41m  [m
[32m+[m[32m            aoi_x_min, aoi_x_max = float(aoi_dis.dataset.x.min()), float(aoi_dis.dataset.x.max())[m
[32m+[m[32m            aoi_y_min, aoi_y_max = float(aoi_dis.dataset.y.min()), float(aoi_dis.dataset.y.max())[m
[32m+[m[41m            [m
[32m+[m[32m            print("Original model bounds:")[m
[32m+[m[32m            print(f"   X: {orig_x_min:.1f} to {orig_x_max:.1f} (range: {orig_x_max-orig_x_min:.1f})")[m
[32m+[m[32m            print(f"   Y: {orig_y_min:.1f} to {orig_y_max:.1f} (range: {orig_y_max-orig_y_min:.1f})")[m
[32m+[m[41m            [m
[32m+[m[32m            print("\nAoI model bounds:")[m
[32m+[m[32m            print(f"   X: {aoi_x_min:.1f} to {aoi_x_max:.1f} (range: {aoi_x_max-aoi_x_min:.1f})")[m
[32m+[m[32m            print(f"   Y: {aoi_y_min:.1f} to {aoi_y_max:.1f} (range: {aoi_y_max-aoi_y_min:.1f})")[m
[32m+[m[41m            [m
[32m+[m[32m            # Verify clipping worked as expected[m
[32m+[m[32m            x_within_bounds = (aoi_x_min >= Xmin-dx) and (aoi_x_max <= Xmax+dx)[m
[32m+[m[32m            y_within_bounds = (aoi_y_min >= Ymin-dy) and (aoi_y_max <= Ymax+dy)[m
[32m+[m[41m            [m
[32m+[m[32m            print(f"\nClipping verification:")[m
[32m+[m[32m            print(f"   X bounds within target: {'✓' if x_within_bounds else '✗'}")[m
[32m+[m[32m            print(f"   Y bounds within target: {'✓' if y_within_bounds else '✗'}")[m
[32m+[m[41m            [m
[32m+[m[32m            if x_within_bounds and y_within_bounds:[m
[32m+[m[32m                print("   🎉 Clipping successful!")[m
[32m+[m[32m            else:[m
[32m+[m[32m                print("   ⚠️  Clipping may not have worked as expected")[m
[32m+[m[41m                [m
[32m+[m[32m            # Calculate area reduction[m
[32m+[m[32m            orig_area = (orig_x_max - orig_x_min) * (orig_y_max - orig_y_min)[m
[32m+[m[32m            aoi_area = (aoi_x_max - aoi_x_min) * (aoi_y_max - aoi_y_min)[m
[32m+[m[32m            area_ratio = aoi_area / orig_area[m
[32m+[m[41m            [m
[32m+[m[32m            print(f"\nArea reduction:")[m
[32m+[m[32m            print(f"   Original area: {orig_area:,.0f} m²")[m
[32m+[m[32m            print(f"   AoI area: {aoi_area:,.0f} m²")[m[41m [m
[32m+[m[32m            print(f"   Ratio: {area_ratio:.4f} ({area_ratio*100:.2f}%)")[m
[32m+[m[41m            [m
[32m+[m[32m        except Exception as e:[m
[32m+[m[32m            print(f"Error comparing DIS bounds: {e}")[m
[32m+[m[32m    else:[m
[32m+[m[32m        print("DIS package not found in common keys - cannot compare bounds")[m
[32m+[m[32m    # Print the names of common packages[m
[32m+[m[32m    print("=== COMMON PACKAGES ===")[m
[32m+[m[32m    print(f"These {len(common_keys)} packages are present in both models:")[m
[32m+[m[32m    for i, key in enumerate(sorted(common_keys), 1):[m
[32m+[m[32m        print(f"{i:2d}. {key}")[m
[32m+[m[32m    MF6_Mdl_AoI.keys()[m
[32m+[m[32m    MF6_Mdl['chd_merged']['head'].isel(time=0, layer=0).isel(x=range(0,10), y=range(0,10)).plot.imshow(cmap='viridis')[m
[32m+[m[32m    MF6_Mdl_AoI['chd_merged']['head'].isel(time=0, layer=0).plot.imshow(cmap='viridis')[m
[32m+[m[32m    Seems like CHD has finally been applied correctly![m
[32m+[m[32m    This is ok. The only missing package is one of the WEL packages, which has no items in the model area.[m
[32m+[m[32m    ### Cleanup MF6[m
[32m+[m[32m    try:[m
[32m+[m[32m        for Pkg in [i for i in MF6_Mdl_AoI.keys() if ('riv' in i.lower()) or ('drn' in i.lower())]:[m
[32m+[m[32m            MF6_Mdl_AoI[Pkg].cleanup(DIS_AoI)[m
[32m+[m[32m    except:[m
[32m+[m[32m        print('Failed to cleanup packaes. Proceeding without cleanup. Fingers crossed!')[m
[32m+[m[32m    ### MSW[m
[32m+[m[32m    # Cleanup MetaSWAP[m
[32m+[m[32m    MSW_Mdl_AoI["grid"].dataset["rootzone_depth"] = MSW_Mdl_AoI["grid"].dataset["rootzone_depth"].fillna(1.0)[m
[32m+[m[32m    ## Couple[m
[32m+[m[32m    metamod_coupling = primod.MetaModDriverCoupling(mf6_model=f'{MdlN}', mf6_recharge_package="msw-rch", mf6_wel_package="msw-sprinkling")[m
[32m+[m[32m    metamod = primod.MetaMod(MSW_Mdl_AoI, Sim_MF6_AoI, coupling_list=[metamod_coupling])[m
[32m+[m[32m    os.makedirs(d_Pa['Pa_MdlN'], exist_ok=True) # Create simulation directory if it doesn't exist[m
[32m+[m[32m    # Those can be changed to relative paths.[m
[32m+[m[32m    Pa_MF6_DLL = r"C:\OD\WS_Mdl\software\iMOD5\bin\iMOD_coupler\libmf6.dll"[m
[32m+[m[32m    Pa_MSW_DLL = r"C:\OD\WS_Mdl\software\iMOD5\bin\iMOD_coupler\MetaSWAP.dll"[m
[32m+[m[32m    metamod.write(directory=d_Pa['Pa_MdlN'], modflow6_dll=Pa_MF6_DLL, metaswap_dll=Pa_MSW_DLL, metaswap_dll_dependency=PDN(Pa_MF6_DLL))[m
[32m+[m[32m    # Review execution times per cell[m
[32m+[m[32m    t = show_cell_times()[m
[32m+[m[32m    # Execute model[m
[32m+[m[32m    # Execute the coupled model[m
[32m+[m[32m    print("🚀 Starting coupled model execution...")[m
[32m+[m[32m    print(f"Model directory: {d_Pa['Pa_MdlN']}")[m
[32m+[m
[32m+[m[32m    # Check what files were written[m
[32m+[m[32m    print("\n📁 Checking written model files:")[m
[32m+[m[32m    if PE(d_Pa['Pa_MdlN']):[m
[32m+[m[32m        model_files = LD(d_Pa['Pa_MdlN'])[m
[32m+[m[32m        for file in sorted(model_files):[m
[32m+[m[32m            print(f"  - {file}")[m
[32m+[m[41m        [m
[32m+[m[32m        # Look for the main execution file (usually .toml or similar)[m
[32m+[m[32m        toml_files = [f for f in model_files if f.endswith('.toml')][m
[32m+[m[32m        if toml_files:[m
[32m+[m[32m            print(f"\n🎯 Found TOML configuration file: {toml_files[0]}")[m
[32m+[m[32m            main_toml = PJ(d_Pa['Pa_MdlN'], toml_files[0])[m
[32m+[m[41m            [m
[32m+[m[32m            # Since we have the DLL paths, we can try to execute using the iMOD coupler[m
[32m+[m[32m            # The iMOD coupler typically needs the .toml file as input[m
[32m+[m[32m            coupler_exe = PJ(PDN(Pa_MF6_DLL), "imodc.exe")[m
[32m+[m[41m            [m
[32m+[m[32m            if PE(coupler_exe):[m
[32m+[m[32m                print(f"✅ Found iMOD coupler: {coupler_exe}")[m
[32m+[m[32m                print(f"🔄 Executing: {coupler_exe} {main_toml}")[m
[32m+[m[41m                [m
[32m+[m[32m                # Execute the model (this will take some time)[m
[32m+[m[32m                import subprocess[m
[32m+[m[32m                try:[m
[32m+[m[32m                    result = subprocess.run([coupler_exe, main_toml],[m[41m [m
[32m+[m[32m                                        cwd=d_Pa['Pa_MdlN'],[m[41m [m
[32m+[m[32m                                        capture_output=True,[m[41m [m
[32m+[m[32m                                        text=True,[m
[32m+[m[32m                                        timeout=3600)  # 1 hour timeout[m
[32m+[m[41m                    [m
[32m+[m[32m                    print(f"Return code: {result.returncode}")[m
[32m+[m[32m                    if result.stdout:[m
[32m+[m[32m                        print("STDOUT:")[m
[32m+[m[32m                        print(result.stdout)[m
[32m+[m[32m                    if result.stderr:[m
[32m+[m[32m                        print("STDERR:")[m
[32m+[m[32m                        print(result.stderr)[m
[32m+[m[41m                        [m
[32m+[m[32m                    if result.returncode == 0:[m
[32m+[m[32m                        print("✅ Model execution completed successfully!")[m
[32m+[m[32m                    else:[m
[32m+[m[32m                        print(f"❌ Model execution failed with return code {result.returncode}")[m
[32m+[m[41m                        [m
[32m+[m[32m                except subprocess.TimeoutExpired:[m
[32m+[m[32m                    print("⏰ Model execution timed out after 1 hour")[m
[32m+[m[32m                except Exception as e:[m
[32m+[m[32m                    print(f"❌ Error executing model: {e}")[m
[32m+[m[32m            else:[m
[32m+[m[32m                print(f"❌ iMOD coupler not found at: {coupler_exe}")[m
[32m+[m[32m                print("You may need to execute the model manually using the iMOD coupler")[m
[32m+[m[32m        else:[m
[32m+[m[32m            print("❌ No TOML configuration file found")[m
[32m+[m[32m    else:[m
[32m+[m[32m        print(f"❌ Model directory not found: {d_Pa['Pa_MdlN']}")[m
[32m+[m[41m        [m
[32m+[m
[32m+[m[32m# --------------------------------------------------------------------------------[m
 [m
 # PrSimP related -----------------------------------------------------------------[m
 def add_OBS(MdlN: str, Opt: str = 'BEGIN OPTIONS\nEND OPTIONS'):[m
[36m@@ -660,7 +984,7 @@[m [mdef xr_clip_Mdl_Aa([m
     elif l_L is not None or Lmin is not None or Lmax is not None:[m
         vprint(f"Warning: Layer subsetting requested but dimension '{L_dim}' not found in data")[m
 [m
[31m-    vprint('🟢🟢🟢 - Successfully clipped xarray data to model area')[m
[32m+[m[32m    vprint('🟢🟢 - Successfully clipped xarray data to model area')[m
     return clipped[m
 [m
 [m
[1mdiff --git a/models/NBr/code/snakemake/Nbr32.smk b/models/NBr/code/snakemake/Nbr32.smk[m
[1mindex ed387b6..308a373 100644[m
[1m--- a/models/NBr/code/snakemake/Nbr32.smk[m
[1m+++ b/models/NBr/code/snakemake/Nbr32.smk[m
[36m@@ -1,5 +1,5 @@[m
 # --- Imports ---[m
[31m-from WS_Mdl.utils import Up_log, Pa_WS, INI_to_d, get_elapsed_time_str, get_MdlN_paths[m
[32m+[m[32mfrom WS_Mdl.utils import Up_log, Pa_WS, INI_to_d, get_elapsed_time_str[m
 import WS_Mdl.utils as U[m
 import WS_Mdl.utils_imod as UIM[m
 import WS_Mdl.geo as G[m
[36m@@ -19,39 +19,35 @@[m [mfrom filelock import FileLock as FL[m
 # --- Variables ---[m
 [m
 ## Options[m
[31m-MdlN        =   "Nbr32"[m
[31m-Mdl         =   ''.join([i for i in MdlN if i.isalpha()])[m
[32m+[m[32mMdlN        =   "NBr32"[m
 #MdlN_SFR_OBS_Src =   'NBr25'[m
 PP_rules       =   "(L == 1)"[m
 #MdlN_B          =   U.get_MdlN_paths(MdlN)['MdlN_B'][m
 [m
 [m
 ## Paths[m
[31m-Pa_Mdl          =   PJ(Pa_WS, f'models/{Mdl}') [m
[32m+[m[32mMdl             =   U.get_Mdl(MdlN)[m
[32m+[m[32md_Pa            =   U.get_MdlN_Pa(MdlN)[m
[32m+[m[32mPa_Mdl          =   d_Pa['Pa_Mdl'][m
 workdir:            Pa_Mdl[m
[31m-Pa_Smk          =   PJ(Pa_Mdl, 'code/snakemake')[m
[31m-Pa_temp         =   PJ(Pa_Smk, 'temp')[m
[31m-Pa_Sim          =   PJ(Pa_Mdl, 'Sim')[m
[32m+[m[32mPa_temp         =   d_Pa['Smk_temp'][m
[32m+[m[32mPa_Sim          =   d_Pa['Sim'][m
 Pa_MdlN         =   PJ(Pa_Sim, f'{MdlN}')[m
[31m-Pa_BAT_RUN      =   PJ(Pa_MdlN, 'RUN.BAT')[m
[32m+[m[32m#Pa_BAT_RUN      =   PJ(Pa_MdlN, 'RUN.BAT')[m
 Pa_OBS, Pa_NAM  =   [PJ(Pa_MdlN, 'GWF_1', i) for i in [f'MODELINPUT/{MdlN}.OBS6', f'{MdlN}.NAM']][m
[31m-Pa_SFR_Src, Pa_SFR_Dst  =   PJ(Pa_Mdl, f"In/SFR/{MdlN}/{MdlN}.SFR6"), PJ(Pa_MdlN, f"GWF_1/MODELINPUT/{MdlN}.SFR6")[m
[31m-Pa_SFR_OBS_Src, Pa_SFR_OBS_Dst  =   PJ(Pa_Mdl, f"In/OBS/SFR/{MdlN_SFR_OBS_Src}/{MdlN_SFR_OBS_Src}.SFR.OBS6"), PJ(Pa_MdlN, f"GWF_1/MODELINPUT/{MdlN}.SFR.OBS6")[m
[32m+[m[32m#Pa_SFR_Src, Pa_SFR_Dst  =   PJ(Pa_Mdl, f"In/SFR/{MdlN}/{MdlN}.SFR6"), PJ(Pa_MdlN, f"GWF_1/MODELINPUT/{MdlN}.SFR6")[m
[32m+[m[32m#Pa_SFR_OBS_Src, Pa_SFR_OBS_Dst  =   PJ(Pa_Mdl, f"In/OBS/SFR/{MdlN_SFR_OBS_Src}/{MdlN_SFR_OBS_Src}.SFR.OBS6"), PJ(Pa_MdlN, f"GWF_1/MODELINPUT/{MdlN}.SFR.OBS6")[m
 Pa_HED, Pa_CBC  =   [PJ(Pa_MdlN, 'GWF_1/MODELOUTPUT', i) for i in ['HEAD/HEAD.HED', 'BUDGET/BUDGET.CBC']][m
[31m-Pa_MVR_Src, Pa_MVR_Dst  =   PJ(Pa_Mdl, f"In/MVR/{MdlN}/{MdlN}.MVR"), PJ(Pa_MdlN, f"GWF_1/MODELINPUT/{MdlN}.MVR")[m
[31m-Pa_DRN                  =   PJ(Pa_MdlN, 'GWF_1/MODELINPUT/NBR30_SYS1.DRN6')[m
[31m-[m
[31m-git_hash = shell("git rev-parse HEAD", read=True).strip()[m
[31m-git_tag  = shell("git describe --tags --exact-match", read=True, allow_error=True).strip() or "no_tag"[m
[32m+[m[32m#Pa_MVR_Src, Pa_MVR_Dst  =   PJ(Pa_Mdl, f"In/MVR/{MdlN}/{MdlN}.MVR"), PJ(Pa_MdlN, f"GWF_1/MODELINPUT/{MdlN}.MVR")[m
 [m
 ## Temp files (for completion validation)[m
[31m-log_Init           =   f"{Pa_Smk}/temp/Log_init_{MdlN}"[m
[31m-log_Sim            =   f"{Pa_Smk}/temp/Log_Sim_{MdlN}"[m
[31m-log_PRJ_to_TIF     =   f"{Pa_Smk}/temp/Log_PRJ_to_TIF_{MdlN}"[m
[31m-log_GXG            =   f"{Pa_Smk}/temp/Log_GXG_{MdlN}"[m
[31m-log_Up_MM          =   f"{Pa_Smk}/temp/Log_Up_MM_{MdlN}"[m
[31m-log_freeze_env     =   f"{Pa_Smk}/temp/Log_freeze_env_{MdlN}"[m
[31m-log_MVR_OPTIONS    =   f"{Pa_Smk}/temp/Log_MVR_OPTIONS{MdlN}"[m
[32m+[m[32mlog_Init           =   f"{Pa_temp}/Log_init_{MdlN}"[m
[32m+[m[32mlog_Sim            =   f"{Pa_temp}/Log_Sim_{MdlN}"[m
[32m+[m[32mlog_PRJ_to_TIF     =   f"{Pa_temp}/Log_PRJ_to_TIF_{MdlN}"[m
[32m+[m[32mlog_GXG            =   f"{Pa_temp}/Log_GXG_{MdlN}"[m
[32m+[m[32mlog_Up_MM          =   f"{Pa_temp}/Log_Up_MM_{MdlN}"[m
[32m+[m[32mlog_freeze_env     =   f"{Pa_temp}/Log_freeze_env_{MdlN}"[m
[32m+[m[32mlog_MVR_OPTIONS    =   f"{Pa_temp}/Log_MVR_OPTIONS{MdlN}"[m
 [m
 [m
 # --- Rules ---[m
[36m@@ -64,90 +60,100 @@[m [monerror: fail[m
 [m
 rule all: # Final rule[m
     input:[m
[31m-        log_Sim,[m
[31m-        log_Up_MM[m
[32m+[m[32m        # log_Sim,[m
[32m+[m[32m        # log_Up_MM,[m
[32m+[m[32m        log_Init,[m
         log_freeze_env[m
         [m
 ## -- PrP --[m
[31m-rule log_Init: # Sets status to running, and writes other info about therun. Has to complete before anything else.[m
[32m+[m[32mrule log_Init: # Sets status to running, and writes other info about the Sim. Has to complete before anything else.[m
     output:[m
         temp(log_Init)[m
     run:[m
         import socket[m
         device = socket.gethostname()[m
[31m-        d_INI = INI_to_d(get_MdlN_paths(MdlN)['INI'])[m
[32m+[m[32m        d_INI = INI_to_d(d_Pa['INI'])[m
         Up_log(MdlN, {  'End Status':       'Running',[m
                         'PrP start DT':     DT.now().strftime("%Y-%m-%d %H:%M:%S"),[m
[31m-                        "Sim device name":  device,[m
[32m+[m[32m                        'Sim device name':  device,[m
                         'Sim Dir':          Pa_Sim,[m
                         '1st SP date':      DT.strptime(d_INI['SDATE'], "%Y%m%d").strftime("%Y-%m-%d"),[m
                         'last SP date':     DT.strptime(d_INI['EDATE'], "%Y%m%d").strftime("%Y-%m-%d")})[m
         pathlib.Path(output[0]).touch() # Create the file to mark the rule as done.[m
 [m
[31m-rule Mdl_Prep: # Prepares Sim Ins (from Ins) via BAT file.[m
[32m+[m[32mrule freeze_pixi_env:[m
[32m+[m[32m    output:[m
[32m+[m[32m        temp(log_freeze_env)[m
[32m+[m[32m    run:[m
[32m+[m[32m        git_hash, git_tag = U.freeze_pixi_env(MdlN)[m
[32m+[m[32m        Up_log(MdlN, {  'Git hash': git_hash,[m
[32m+[m[32m                        'Git tag': git_tag}) # Log git info[m
[32m+[m[32m        pathlib.Path(output[0]).touch() # Create the file to mark the rule as done.[m
[32m+[m
[32m+[m[32mrule iMP_Mdl_Prep: # Prepares Sim Ins (from Ins) via iMOD python. iMOD python still uses an INI and a PRJ file.[m
     input:[m
         log_Init,[m
[31m-        BAT = f"code/Mdl_Prep/Mdl_Prep_{MdlN}.bat",[m
[31m-        INI = f"code/Mdl_Prep/Mdl_Prep_{MdlN}.ini",[m
[31m-        PRJ = f"In/PRJ/{MdlN}.prj"[m
[32m+[m[32m        BAT = d_Pa['BAT'],[m
[32m+[m[32m        INI = d_Pa['INI'],[m
[32m+[m[32m        PRJ = d_Pa['PRJ'][m
     output:[m
         Pa_BAT_RUN[m
     shell:[m
         "call {input.BAT}"[m
     ## Mdl_Prep Ins (mainly the PRJ) point to a lot of other files. Technically, all of them should be in the Ins of this rule. Practically, they don't need to be. That is because Ins from previous Sims aren't meant to be edited, as they're stamped with a MdlN. If one of the Ins that is new for this run is changed, then the script that edits that In Fi should be part of this snakemake file too.[m
 [m
[31m-## -- PrSimP --[m
[31m-rule add_OBS:[m
[31m-    input:[m
[31m-        Pa_BAT_RUN[m
[31m-    output:[m
[31m-        Pa_OBS[m
[31m-    run:[m
[31m-        UIM.add_OBS(MdlN, "BEGIN OPTIONS\n\tDIGITS 6\nEND OPTIONS")[m
[31m-[m
[31m-## -- Sim ---[m
[31m-rule Sim: # Runs the simulation via BAT file.[m
[31m-    input:[m
[31m-        Pa_OBS[m
[31m-    output:[m
[31m-        temp(log_Sim)[m
[31m-    run:[m
[31m-        os.chdir(Pa_MdlN) # Change directory to the model folder.[m
[31m-        DT_Sim_Start = DT.now()[m
[31m-        Up_log(MdlN, {  'Sim start DT'  :   DT_Sim_Start.strftime("%Y-%m-%d %H:%M:%S")})[m
[31m-        shell(Pa_BAT_RUN)[m
[31m-        pathlib.Path(output[0]).touch() [m
[31m-        Up_log(MdlN, {  'Sim end DT'    :   DT.now().strftime("%Y-%m-%d %H:%M:%S"),[m
[31m-                        'Sim Dur'       :   get_elapsed_time_str(DT_Sim_Start),[m
[31m-                        'End Status'    :   'Completed'})[m
[31m-[m
[31m-## -- PoP ---[m
[31m-rule PRJ_to_TIF:[m
[31m-    input:[m
[31m-        log_Sim[m
[31m-    output:[m
[31m-        temp(log_PRJ_to_TIF)[m
[31m-    run:[m
[31m-        G.PRJ_to_TIF(MdlN)[m
[31m-        pathlib.Path(output[0]).touch() # Create the file to mark the rule as done.[m
[31m-[m
[31m-rule GXG:[m
[31m-    input:[m
[31m-        log_Sim[m
[31m-    output:[m
[31m-        temp(log_GXG)[m
[31m-    run:[m
[31m-        G.HD_IDF_GXG_to_TIF(MdlN, rules=PP_rules)[m
[31m-        pathlib.Path(output[0]).touch() # Create the file to mark the rule as done.[m
[31m-[m
[31m-rule Up_MM:[m
[31m-    input:[m
[31m-        log_PRJ_to_TIF,[m
[31m-        log_GXG[m
[31m-    output:[m
[31m-        log_Up_MM[m
[31m-    run:[m
[31m-        G.Up_MM(MdlN, MdlN_MM_B=MdlN_MM_B)     # Update MM [m
[31m-        Up_log(MdlN, {  'PoP end DT':   DT.now().strftime("%Y-%m-%d %H:%M:%S"),[m
[31m-                        'End Status':   'PoPed'}) # Update log[m
[31m-        pathlib.Path(output[0]).touch()     # Create the file to mark the rule as done.[m
\ No newline at end of file[m
[32m+[m[32m# ## -- PrSimP --[m
[32m+[m[32m# rule add_OBS:[m
[32m+[m[32m#     input:[m
[32m+[m[32m#         Pa_BAT_RUN[m
[32m+[m[32m#     output:[m
[32m+[m[32m#         Pa_OBS[m
[32m+[m[32m#     run:[m
[32m+[m[32m#         UIM.add_OBS(MdlN, "BEGIN OPTIONS\n\tDIGITS 6\nEND OPTIONS")[m
[32m+[m
[32m+[m[32m# ## -- Sim ---[m
[32m+[m[32m# rule Sim: # Runs the simulation via BAT file.[m
[32m+[m[32m#     input:[m
[32m+[m[32m#         Pa_OBS[m
[32m+[m[32m#     output:[m
[32m+[m[32m#         temp(log_Sim)[m
[32m+[m[32m#     run:[m
[32m+[m[32m#         os.chdir(Pa_MdlN) # Change directory to the model folder.[m
[32m+[m[32m#         DT_Sim_Start = DT.now()[m
[32m+[m[32m#         Up_log(MdlN, {  'Sim start DT'  :   DT_Sim_Start.strftime("%Y-%m-%d %H:%M:%S")})[m
[32m+[m[32m#         shell(Pa_BAT_RUN)[m
[32m+[m[32m#         pathlib.Path(output[0]).touch()[m[41m [m
[32m+[m[32m#         Up_log(MdlN, {  'Sim end DT'    :   DT.now().strftime("%Y-%m-%d %H:%M:%S"),[m
[32m+[m[32m#                         'Sim Dur'       :   get_elapsed_time_str(DT_Sim_Start),[m
[32m+[m[32m#                         'End Status'    :   'Completed'})[m
[32m+[m
[32m+[m[32m# ## -- PoP ---[m
[32m+[m[32m# rule PRJ_to_TIF:[m
[32m+[m[32m#     input:[m
[32m+[m[32m#         log_Sim[m
[32m+[m[32m#     output:[m
[32m+[m[32m#         temp(log_PRJ_to_TIF)[m
[32m+[m[32m#     run:[m
[32m+[m[32m#         G.PRJ_to_TIF(MdlN)[m
[32m+[m[32m#         pathlib.Path(output[0]).touch() # Create the file to mark the rule as done.[m
[32m+[m
[32m+[m[32m# rule GXG:[m
[32m+[m[32m#     input:[m
[32m+[m[32m#         log_Sim[m
[32m+[m[32m#     output:[m
[32m+[m[32m#         temp(log_GXG)[m
[32m+[m[32m#     run:[m
[32m+[m[32m#         G.HD_IDF_GXG_to_TIF(MdlN, rules=PP_rules)[m
[32m+[m[32m#         pathlib.Path(output[0]).touch() # Create the file to mark the rule as done.[m
[32m+[m
[32m+[m[32m# rule Up_MM:[m
[32m+[m[32m#     input:[m
[32m+[m[32m#         log_PRJ_to_TIF,[m
[32m+[m[32m#         log_GXG[m
[32m+[m[32m#     output:[m
[32m+[m[32m#         log_Up_MM[m
[32m+[m[32m#     run:[m
[32m+[m[32m#         G.Up_MM(MdlN, MdlN_MM_B=MdlN_MM_B)     # Update MM[m[41m [m
[32m+[m[32m#         Up_log(MdlN, {  'PoP end DT':   DT.now().strftime("%Y-%m-%d %H:%M:%S"),[m
[32m+[m[32m#                         'End Status':   'PoPed'}) # Update log[m
[32m+[m[32m#         pathlib.Path(output[0]).touch()     # Create the file to mark the rule as done.[m
\ No newline at end of file[m
